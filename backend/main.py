from fastapi import FastAPI, Query, HTTPException, Depends, Request
from fastapi import UploadFile, File, Form
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pymongo import MongoClient
from bson import ObjectId
import os
import json
from datetime import datetime, timedelta
from typing import Optional, List
import random
import hmac
import hashlib
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
import urllib.parse
import time
from pathlib import Path
import jwt
import re

app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ frontend –∫ backend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "https://casa-de-costura.ru", "*"],  # Frontend URLs
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    expose_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
)

# –ü—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (Docker volumes)
STATIC_IMAGES_DIR = Path("static/images")
CONTRACTS_DIR = Path("static/contracts")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# Telegram Bot Token - REPLACE WITH YOURS
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")

# JWT Configuration
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-change-in-production")
JWT_ALGORITHM = "HS256"
JWT_EXPIRATION_HOURS = 24 * 7  # 7 –¥–Ω–µ–π

# Security
security = HTTPBearer(auto_error=False)

# MongoDB setup
client = MongoClient(os.environ.get("MONGO_URL", "mongodb://mongo:27017/"))
db = client.cars_db
cars_collection = db.cars
scrape_cache = db.scrape_cache
users_collection = db.users  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
credit_applications = db.credit_applications  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
leasing_applications = db.leasing_applications  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ª–∏–∑–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
reviews_collection = db.reviews  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
# MANAGER_IDS = set(map(lambda x: x.strip(), os.environ.get("MANAGER_IDS", "").split(","))) if os.environ.get("MANAGER_IDS") else set()


def download_and_save_image(image_url, car_id):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π URL –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
    """
    if not image_url or image_url == "":
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ car_id
        safe_filename = "".join(c for c in str(car_id) if c.isalnum() or c in ('-', '_'))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        parsed_url = urllib.parse.urlparse(image_url)
        path = parsed_url.path.lower()
        
        if path.endswith(('.jpg', '.jpeg')):
            extension = '.jpg'
        elif path.endswith('.png'):
            extension = '.png'
        elif path.endswith('.webp'):
            extension = '.webp'
        else:
            extension = '.jpg'  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        
        filename = f"{safe_filename}{extension}"
        file_path = STATIC_IMAGES_DIR / filename
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if file_path.exists():
            return f"/static/images/{filename}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Referer': 'https://www.che168.com/',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        }
        
        response = requests.get(image_url, headers=headers, timeout=30, stream=True)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content_type = response.headers.get('content-type', '').lower()
        if not content_type.startswith('image/'):
            print(f"Warning: URL {image_url} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (content-type: {content_type})")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
        return f"/static/images/{filename}"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
        return None

def get_mock_cars():
    """Generates a list of mock car data."""
    brands = ["Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "BMW", "Mercedes-Benz", "Audi"]
    models = ["Camry", "Civic", "F-150", "Silverado", "Rogue", "X5", "C-Class", "A4"]
    cars = []
    for i in range(100):
        brand = random.choice(brands)
        cars.append({
            "seriesId": i,
            "brandName": brand,
            "seriesName": f"{random.choice(models)} {random.randint(2010, 2023)}",
            "price": f"{random.randint(10, 50)}‰∏á",
            "volume": round(random.uniform(1.0, 5.0), 1),
            "imageUrl": f"https://picsum.photos/seed/{i}/400/300"
        })
    return cars

def scrape_and_cache_cars():
    """Scrapes car data from the website and caches it."""
    url = "https://www.che168.com/china/list/"
    
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-web-security')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    driver = webdriver.Remote(
        command_executor='http://selenium:4444/wd/hub',
        options=options
    )
    
    try:
        print(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç: {url}")
        driver.get(url)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.implicitly_wait(15)
        time.sleep(5)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        # –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        # Save screenshot –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        driver.save_screenshot("debug_screenshot.png")
        print("Screenshot saved as debug_screenshot.png")
        
        # Save page source –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with open("debug_page_source.html", "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print("Page source saved as debug_page_source.html")
        
        soup = BeautifulSoup(driver.page_source, "html.parser")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º soup –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        soup = BeautifulSoup(driver.page_source, "html.parser")
        
    finally:
        driver.quit()

    car_list = []

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ che168.com
    selectors_to_try = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        "div[class*='viewlist_li']",          # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–ø–∏—Å–∫–∞ –Ω–∞ che168.com  
        "li[class*='list-item']",             # li —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        "div[class*='list-item']",            # div —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        ".list-item",                         # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å —Å–ø–∏—Å–∫–∞
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        "div[class*='car-card']",             # –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        "div[class*='item-pic']",             # –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        "div[class*='pic-box']",              # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        # "div[class*='result']",               # –£–±–∏—Ä–∞–µ–º - –ª–æ–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "div[class*='search-result']",        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        "article",                            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        
        # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        "[data-testid*='car']",               # data –∞—Ç—Ä–∏–±—É—Ç—ã
        ".used-car-item",                     # –ü–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        ".sale-car",                          # –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ –∞–≤—Ç–æ
        "li[class*='car']",                   # li —ç–ª–µ–º–µ–Ω—Ç—ã —Å car
    ]
    
    car_containers = []
    used_selector = None
    
    print(f"üîç –ü–æ–ø—Ä–æ–±—É–µ–º {len(selectors_to_try)} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    
    for selector in selectors_to_try:
        car_containers = soup.select(selector)
        print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(car_containers)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if car_containers and len(car_containers) > 2:  # –ú–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä '{selector}' —Å {len(car_containers)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            used_selector = selector
            break
        elif car_containers and len(car_containers) > 0:
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            has_car_content = False
            for container in car_containers[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
                text_content = container.get_text().lower()
                if any(keyword in text_content for keyword in ['‰∏á', 'ËΩ¶', 'Ê±ΩËΩ¶', 'bmw', 'audi', 'toyota']):
                    has_car_content = True
                    break
            
            if has_car_content:
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä '{selector}' —Å {len(car_containers)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)")
                used_selector = selector
                break
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if car_containers:
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for i, container in enumerate(car_containers[:3]):
            print(f"   –≠–ª–µ–º–µ–Ω—Ç {i+1}:")
            print(f"      –¢–µ–≥: {container.name}")
            print(f"      –ö–ª–∞—Å—Å—ã: {container.get('class', [])}")
            text_preview = container.get_text()[:100].replace('\n', ' ').strip()
            print(f"      –¢–µ–∫—Å—Ç: {text_preview}...")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    if not car_containers:
        print("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
        print("üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        all_images = soup.find_all("img")
        print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(all_images)}")
        
        car_related_images = []
        
        for img in all_images:
            alt_text = img.get('alt', '').lower()
            src = img.get('src', '')
            title = img.get('title', '').lower()
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
            car_keywords = ['ËΩ¶', 'car', 'Ê±ΩËΩ¶', 'Â•îÈ©∞', 'ÂÆùÈ©¨', 'Â••Ëø™', '‰∏∞Áî∞', 'Êú¨Áî∞', 'Â§ß‰ºó', 'ÊØî‰∫öËø™', 'bmw', 'audi', 'toyota', 'honda']
            if any(keyword in alt_text + title for keyword in car_keywords):
                parent = img.find_parent()
                if parent and parent not in car_related_images:
                    car_related_images.append(parent)
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {alt_text[:50]}...")
        
        if car_related_images:
            car_containers = car_related_images[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(car_containers)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            used_selector = "image-based-search"
    
    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not car_containers:
        print("üö® –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        for i in range(10):
            car_id = f"test_car_{i}"
            test_image_url = f"https://picsum.photos/seed/{i+100}/800/600"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            print(f"üì∏ –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/10...")
            local_image_url = download_and_save_image(test_image_url, car_id)
            time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            car_list.append({
                "title": f"ÊµãËØïÊ±ΩËΩ¶ {i+1}Âè∑ - Test Car #{i+1}",
                "price": f"{random.randint(15, 45)}‰∏á",
                "image_url": test_image_url,
                "local_image_url": local_image_url,
                "car_id": car_id
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if car_list:
            scrape_cache.delete_many({})
            scrape_cache.insert_many(car_list)
            
        return car_list
    
    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(car_containers)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
    
    for i, car_container in enumerate(car_containers):
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = None
            title_selectors = [
                "h3", "h4", "h5", ".title", ".car-name", ".name",
                "[class*='title']", "[class*='name']", "a[title]",
                ".series-name", ".model-name", ".car-title"
            ]
            
            for title_selector in title_selectors:
                title_element = car_container.select_one(title_selector)
                if title_element:
                    title_text = title_element.get('title') or title_element.text.strip()
                    if title_text and len(title_text) > 2:
                        title = title_text
                        break
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã
            price = None
            price_selectors = [
                ".price", "[class*='price']", ".money", "[class*='money']",
                "span[style*='color: rgb(255']", ".sale-price", ".current-price"
            ]
            
            for price_selector in price_selectors:
                price_element = car_container.select_one(price_selector)
                if price_element:
                    price_text = price_element.text.strip()
                    # –ò—â–µ–º —á–∏—Å–ª–∞ —Å "‰∏á"
                    if '‰∏á' in price_text or any(char.isdigit() for char in price_text):
                        price = price_text
                        break
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = ""
            image_element = car_container.find("img")
            if image_element:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for attr in ['src', 'data-src', 'data-original', 'data-lazy', 'data-img']:
                    url = image_element.get(attr)
                    if url and url != 'data:image' and 'placeholder' not in url.lower():
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
                        if url.startswith('//'):
                            image_url = 'https:' + url
                        elif url.startswith('/'):
                            image_url = 'https://www.che168.com' + url
                        elif url.startswith('http'):
                            image_url = url
                        else:
                            image_url = 'https:' + url
                        break

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
            if title and len(title.strip()) > 2:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
                if not price:
                    price = f"{random.randint(15, 50)}‰∏á"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_id = f"che168_{len(car_list)}_{hash(title + price) % 10000}"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                local_image_url = None
                if image_url:
                    print(f"üì∏ –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: {title[:30]}...")
                    local_image_url = download_and_save_image(image_url, car_id)
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                
                car_list.append({
                    "title": title,
                    "price": price,
                    "image_url": image_url,
                    "local_image_url": local_image_url,
                    "car_id": car_id
                })
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å #{len(car_list)}: {title[:30]}... - {price}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
            continue
    
    print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(car_list)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {used_selector}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if car_list:
        scrape_cache.delete_many({})
        scrape_cache.insert_many(car_list)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à")
        
    return car_list


def verify_telegram_auth(auth_data):
    if not auth_data:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à–∞
    if 'hash' not in auth_data:
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ —Ö–µ—à–∞
        print("‚ö†Ô∏è Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True

 # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    auth_data_copy = auth_data.copy()
    received_hash = auth_data_copy.pop('hash')
    auth_data_list = [f"{key}={value}" for key, value in sorted(auth_data_copy.items())]
    data_check_string = "\n".join(auth_data_list)

    secret_key = hashlib.sha256(TELEGRAM_BOT_TOKEN.encode()).digest()
    calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

    return received_hash == calculated_hash

# JWT —Ñ—É–Ω–∫—Ü–∏–∏
def create_jwt_token(user_data):
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "user_id": user_data.get("id"),
        "username": user_data.get("username"),
        "first_name": user_data.get("first_name"),
        "last_name": user_data.get("last_name"),
        "exp": datetime.utcnow() + timedelta(hours=JWT_EXPIRATION_HOURS),
        "iat": datetime.utcnow()
    }
    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

def verify_jwt_token(token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    if not credentials:
        return None
    
    user_data = verify_jwt_token(credentials.credentials)
    if not user_data:
        return None
    
    return user_data

def get_current_user_or_debug(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç debug —Ä–µ–∂–∏–º"""
    if not credentials:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
    user_data = verify_jwt_token(credentials.credentials)
    if user_data:
        return user_data
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º debug —Ç–æ–∫–µ–Ω
    try:
        import base64
        import json
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 —Ç–æ–∫–µ–Ω
        decoded_token = base64.b64decode(credentials.credentials).decode('utf-8')
        debug_data = json.loads(decoded_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ debug —Ç–æ–∫–µ–Ω
        if debug_data.get('debug') and debug_data.get('user'):
            user_info = debug_data['user']
            return {
                "user_id": user_info.get('id'),
                "username": user_info.get('username'),
                "first_name": user_info.get('name', '').split()[0] if user_info.get('name') else '',
                "last_name": ' '.join(user_info.get('name', '').split()[1:]) if user_info.get('name') else '',
                "is_debug": True
            }
    except Exception as e:
        print(f"Debug token parsing error: {e}")
        return None
    
    return None

def save_user_to_db(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = user_data.get("id")
    if not user_id:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = users_collection.find_one({"telegram_id": user_id})
    
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_data = {
            "username": user_data.get("username"),
            "first_name": user_data.get("first_name"),
            "last_name": user_data.get("last_name"),
            "photo_url": user_data.get("photo_url"),
            "last_login": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        users_collection.update_one(
            {"telegram_id": user_id},
            {"$set": update_data}
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = {
            "telegram_id": user_id,
            "username": user_data.get("username"),
            "first_name": user_data.get("first_name"),
            "last_name": user_data.get("last_name"),
            "photo_url": user_data.get("photo_url"),
            "last_login": datetime.utcnow(),
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        users_collection.insert_one(new_user)
    
    return users_collection.find_one({"telegram_id": user_id}, {"_id": 0})

@app.post("/api/auth/telegram-webapp")
def auth_telegram_webapp(auth_data: dict):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑ Telegram WebApp"""
    try:
        init_data = auth_data.get("initData")
        user_data = auth_data.get("user")
        
        if not init_data or not user_data:
            raise HTTPException(status_code=400, detail="Missing initData or user data")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è initData
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_user = save_user_to_db(user_data)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = create_jwt_token(user_data)
        
        return {
            "success": True,
            "user": saved_user,
            "token": token,
            "message": "Successful authentication"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Authentication failed: {str(e)}")

@app.post("/api/auth/telegram-web")
def auth_telegram_web(auth_data: dict):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget"""
    if not verify_telegram_auth(auth_data.copy()):
        raise HTTPException(status_code=403, detail="Invalid authentication data")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    saved_user = save_user_to_db(auth_data)
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    token = create_jwt_token(auth_data)
    
    return {
        "success": True,
        "user": saved_user,
        "token": token,
        "message": "Successful authentication"
    }

@app.get("/api/auth/validate")
def validate_token(current_user = Depends(get_current_user)):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Invalid or expired token")
    
    return {
        "valid": True,
        "user": current_user
    }

@app.post("/api/auth/logout")
def logout(current_user = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    # –í –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å blacklist —Ç–æ–∫–µ–Ω–æ–≤
    return {
        "success": True,
        "message": "Successfully logged out"
    }

@app.post("/api/auth/telegram")
async def auth_telegram(request: Request):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è Login Widget (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ form-data)"""
    try:
        content_type = request.headers.get("content-type", "")
        auth_data = None

        if "application/json" in content_type:
            auth_data = await request.json()
        elif "application/x-www-form-urlencoded" in content_type or "multipart/form-data" in content_type:
            form = await request.form()
            # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ str –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            auth_data = {k: (v if isinstance(v, str) else str(v)) for k, v in form.items()}
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º JSON –∫–∞–∫ fallback
            try:
                auth_data = await request.json()
            except Exception:
                auth_data = None

        if not isinstance(auth_data, dict) or not auth_data:
            raise HTTPException(status_code=400, detail="Invalid or empty auth data")

        if not verify_telegram_auth(auth_data.copy()):
            raise HTTPException(status_code=403, detail="Invalid authentication data")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_user = save_user_to_db(auth_data)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = create_jwt_token(auth_data)
        
        return {
            "success": True,
            "user": saved_user,
            "token": token,
            "message": "Successful authentication"
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Authentication failed: {str(e)}")

@app.get("/api/scrape-cars")
def get_scraped_cars():
    """Returns scraped car data, using cache if available."""
    cached_cars = list(scrape_cache.find({}, {"_id": 0}))
    if cached_cars:
        return {
            "source": "cache",
            "count": len(cached_cars),
            "data": json.loads(json.dumps(cached_cars, default=str))
        }

    car_list = scrape_and_cache_cars()
    return {
        "source": "live",
        "count": len(car_list),
        "data": car_list
    }

@app.post("/api/refresh-cache")
def refresh_cache():
    """Force refresh the car cache by scraping new data."""
    try:
        car_list = scrape_and_cache_cars()
        return {
            "success": True,
            "message": f"Cache refreshed with {len(car_list)} cars",
            "count": len(car_list)
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"Failed to refresh cache: {str(e)}"
        }

@app.get("/api/images/stats")
def get_images_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    try:
        images_dir = STATIC_IMAGES_DIR
        if not images_dir.exists():
            return {"total_images": 0, "total_size": 0, "status": "directory_not_found"}
        
        image_files = list(images_dir.glob("*"))
        total_size = sum(f.stat().st_size for f in image_files if f.is_file())
        
        return {
            "total_images": len(image_files),
            "total_size": total_size,
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "directory": str(images_dir),
            "status": "ok"
        }
    except Exception as e:
        return {"error": str(e), "status": "error"}

@app.get("/api/volumes/stats")
def get_volumes_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É volumes (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä—ã)."""
    try:
        stats = {
            "images": {"files": 0, "size_mb": 0},
            "contracts": {"files": 0, "size_mb": 0}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if STATIC_IMAGES_DIR.exists():
            image_files = list(STATIC_IMAGES_DIR.glob("*"))
            total_size = sum(f.stat().st_size for f in image_files if f.is_file())
            stats["images"] = {
                "files": len(image_files),
                "size_mb": round(total_size / (1024 * 1024), 2)
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
        if CONTRACTS_DIR.exists():
            contract_files = list(CONTRACTS_DIR.glob("*.docx"))
            total_size = sum(f.stat().st_size for f in contract_files if f.is_file())
            stats["contracts"] = {
                "files": len(contract_files),
                "size_mb": round(total_size / (1024 * 1024), 2)
            }
        
        return {
            "status": "ok",
            "volumes": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": str(e), "status": "error"}

@app.post("/api/images/cleanup")
def cleanup_images():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    try:
        images_dir = STATIC_IMAGES_DIR
        if not images_dir.exists():
            return {"message": "Directory not found", "status": "ok"}
        
        deleted_count = 0
        for image_file in images_dir.glob("*"):
            if image_file.is_file():
                image_file.unlink()
                deleted_count += 1
        
        return {
            "message": f"Deleted {deleted_count} images",
            "deleted_count": deleted_count,
            "status": "ok"
        }
    except Exception as e:
        return {"error": str(e), "status": "error"}

@app.post("/api/contracts/cleanup")
def cleanup_contracts():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏."""
    try:
        contracts_dir = CONTRACTS_DIR
        if not contracts_dir.exists():
            return {"message": "Directory not found", "status": "ok"}
        
        deleted_count = 0
        for contract_file in contracts_dir.glob("*.docx"):
            if contract_file.is_file():
                contract_file.unlink()
                deleted_count += 1
        
        return {
            "message": f"Deleted {deleted_count} contracts",
            "deleted_count": deleted_count,
            "status": "ok"
        }
    except Exception as e:
        return {"error": str(e), "status": "error"}


# ====== –î–æ–≥–æ–≤–æ—Ä—ã (.docx) ======
ALLOWED_CONTRACT_TYPES = {"agency", "consignment", "sale"}
ALLOWED_CONTRACT_EXT = {".docx", ".doc"}

def _contract_filename(contract_type: str) -> str:
    # –•—Ä–∞–Ω–∏–º –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º <type>.docx, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ .doc
    return f"{contract_type}.docx"

def _contract_path(contract_type: str) -> Path:
    return CONTRACTS_DIR / _contract_filename(contract_type)

def _contract_meta(contract_type: str):
    file_path = _contract_path(contract_type)
    if not file_path.exists():
        return None
    stat = file_path.stat()
    return {
        "type": contract_type,
        "file_name": file_path.name,
        "size": stat.st_size,
        "updated_at": datetime.utcfromtimestamp(stat.st_mtime).isoformat(),
        "url": f"/static/contracts/{file_path.name}",
    }

@app.get("/api/contracts")
def list_contracts():
    try:
        result = []
        for t in sorted(list(ALLOWED_CONTRACT_TYPES)):
            meta = _contract_meta(t)
            if meta:
                result.append(meta)
        return {"data": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list contracts: {str(e)}")

@app.get("/api/contracts/{contract_type}")
def get_contract(contract_type: str):
    if contract_type not in ALLOWED_CONTRACT_TYPES:
        raise HTTPException(status_code=400, detail="Invalid contract type")
    meta = _contract_meta(contract_type)
    if not meta:
        raise HTTPException(status_code=404, detail="Contract not found")
    return {"data": meta}

@app.get("/static/contracts/{contract_type}.docx")
def serve_contract_file(contract_type: str):
    """–†–∞–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º"""
    if contract_type not in ALLOWED_CONTRACT_TYPES:
        raise HTTPException(status_code=400, detail="Invalid contract type")
    
    file_path = _contract_path(contract_type)
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="Contract not found")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    response = FileResponse(
        path=file_path,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        filename=f"{contract_type}.docx"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    response.headers["Content-Type"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    return response

@app.post("/api/contracts/{contract_type}")
async def upload_contract(
    contract_type: str,
    file: UploadFile = File(...),
):
    if contract_type not in ALLOWED_CONTRACT_TYPES:
        raise HTTPException(status_code=400, detail="Invalid contract type")

    original_name = file.filename or ""
    ext = os.path.splitext(original_name)[1].lower()
    if ext not in ALLOWED_CONTRACT_EXT:
        raise HTTPException(status_code=400, detail="Only .docx or .doc files are allowed")

    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = await file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if len(content) == 0:
            raise HTTPException(status_code=400, detail="File is empty")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ .docx/.doc —Ñ–∞–π–ª
        # .docx —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å PK (ZIP —Ñ–æ—Ä–º–∞—Ç)
        # .doc —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if ext == '.docx':
            if not content.startswith(b'PK'):
                raise HTTPException(status_code=400, detail="Invalid .docx file format")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã .docx —Ñ–∞–π–ª–∞
            try:
                import zipfile
                import io
                
                with zipfile.ZipFile(io.BytesIO(content)) as zip_file:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ .docx
                    required_files = ['word/document.xml', '[Content_Types].xml']
                    if not all(f in zip_file.namelist() for f in required_files):
                        raise HTTPException(status_code=400, detail="Invalid .docx file structure")
            except zipfile.BadZipFile:
                raise HTTPException(status_code=400, detail="Invalid .docx file format")
            except Exception as e:
                raise HTTPException(status_code=400, detail=f"Error validating .docx file: {str(e)}")
        
        target_path = _contract_path(contract_type)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ <type>.docx
        with open(target_path, "wb") as f:
            f.write(content)

        meta = _contract_meta(contract_type)
        return {"success": True, "data": meta}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to upload: {str(e)}")


@app.delete("/api/contracts/{contract_type}")
def delete_contract(contract_type: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    if contract_type not in ALLOWED_CONTRACT_TYPES:
        raise HTTPException(status_code=400, detail="Invalid contract type")

    try:
        target_path = _contract_path(contract_type)
        if not target_path.exists():
            raise HTTPException(status_code=404, detail="Contract not found")

        target_path.unlink(missing_ok=False)
        return {"success": True}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete: {str(e)}")

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/api/cars")
def get_cars(
    page: int = 1,
    page_size: int = 10,
    sort_by: Optional[str] = None,
    sort_order: str = "asc",
    title: Optional[str] = None,
    price_from: Optional[str] = None,
    price_to: Optional[str] = None,
    year_from: Optional[str] = None,
    year_to: Optional[str] = None,
    country: Optional[str] = None,
):
    print(f"üîç API /cars –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"   page: {page}")
    print(f"   page_size: {page_size}")
    print(f"   title: {title}")
    print(f"   price_from: {price_from}")
    print(f"   price_to: {price_to}")
    print(f"   year_from: {year_from}")
    print(f"   year_to: {year_to}")
    print(f"   country: {country}")
    print(f"   sort_by: {sort_by}")
    print(f"   sort_order: {sort_order}")
    
    # Get cached scraped data
    cached_cars = list(scrape_cache.find({}, {"_id": 0}))
    print(f"üìã –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫—ç—à–µ: {len(cached_cars)}")
    
    # If no cached data, scrape fresh data
    if not cached_cars:
        print("‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
        car_list = scrape_and_cache_cars()
        cached_cars = list(scrape_cache.find({}, {"_id": 0}))
        print(f"‚úÖ –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(cached_cars)}")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    # print("üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    structured_cars = []
    for car in cached_cars:
        try:
            structured_car = structure_car_data(car)
            structured_cars.append(structured_car)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
            continue
    
    # print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(structured_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    # Apply filters
    filtered_cars = structured_cars
    # print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏–∑ {len(filtered_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    if title:
        # print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ title: '{title}'")
        before_count = len(filtered_cars)
        filtered_cars = [car for car in filtered_cars if title.lower() in car.get("title", "").lower() or title.lower() in car.get("brand", "").lower()]
        after_count = len(filtered_cars)
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {before_count} -> {after_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    if price_from:
        # print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ price_from: {price_from}")
        before_count = len(filtered_cars)
        filtered_cars = [car for car in filtered_cars if car.get("price_value", 0) >= float(price_from)]
        after_count = len(filtered_cars)
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {before_count} -> {after_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    if price_to:
        # print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ price_to: {price_to}")
        before_count = len(filtered_cars)
        filtered_cars = [car for car in filtered_cars if car.get("price_value", 0) <= float(price_to)]
        after_count = len(filtered_cars)
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {before_count} -> {after_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É
    if year_from or year_to:
        # print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É: from={year_from}, to={year_to}")
        before_count = len(filtered_cars)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –≥–æ–¥–æ–º
        cars_with_year = [car for car in filtered_cars if car.get("year") is not None]
        # print(f"   –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –≥–æ–¥–æ–º: {len(cars_with_year)} –∏–∑ {len(filtered_cars)}")
        
        if year_from:
            year_from_int = int(year_from)
            cars_with_year = [car for car in cars_with_year if car.get("year", 0) >= year_from_int]
            # print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ year_from ({year_from_int}): {len(cars_with_year)}")
        
        if year_to:
            year_to_int = int(year_to)
            cars_with_year = [car for car in cars_with_year if car.get("year", 0) <= year_to_int]
            # print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ year_to ({year_to_int}): {len(cars_with_year)}")
        
        filtered_cars = cars_with_year
        after_count = len(filtered_cars)
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É: {before_count} -> {after_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
    if country:
        # print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ: {country}")
        before_count = len(filtered_cars)
        if country == 'all':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
            pass
        else:
            filtered_cars = [car for car in filtered_cars if car.get("country") == country]
        after_count = len(filtered_cars)
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {before_count} -> {after_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

    # Apply sorting
    if sort_by:
        # print(f"üîç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ {sort_by} –≤ –ø–æ—Ä—è–¥–∫–µ {sort_order}")
        reverse = sort_order == "desc"
        if sort_by == "title":
            filtered_cars.sort(key=lambda x: x.get("title", ""), reverse=reverse)
        elif sort_by == "price":
            filtered_cars.sort(key=lambda x: x.get("price_value", 0), reverse=reverse)
        elif sort_by == "year":
            filtered_cars.sort(key=lambda x: x.get("year", 0), reverse=reverse)
        elif sort_by == "brand":
            filtered_cars.sort(key=lambda x: x.get("brand", ""), reverse=reverse)

    total_cars = len(filtered_cars)
    # print(f"üìä –ò—Ç–æ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {total_cars} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    # Apply pagination
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    paginated_cars = filtered_cars[start_index:end_index]
    # print(f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø–æ–∫–∞–∑–∞–Ω–æ {len(paginated_cars)} –∏–∑ {total_cars}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    # if paginated_cars:
    #     print("üìã –ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:")
    #     for i, car in enumerate(paginated_cars[:3]):
    #         print(f"   {i+1}. {car.get('brand', 'N/A')} {car.get('model', 'N/A')} ({car.get('year', 'N/A')}) - {car.get('price', {}).get('formatted', 'N/A')}")
    
    result = {
        "total": total_cars,
        "page": page,
        "page_size": page_size,
        "data": json.loads(json.dumps(paginated_cars, default=str))
    }
    
    print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result['data'])} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    return result

@app.get("/api/health")
def get_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    health_status = {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "services": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
    try:
        client.admin.command('ping')
        health_status["services"]["mongodb"] = "ok"
    except Exception as e:
        health_status["services"]["mongodb"] = f"error: {str(e)}"
        health_status["status"] = "degraded"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Selenium
    try:
        selenium_url = "http://selenium:4444/wd/hub/status"
        response = requests.get(selenium_url, timeout=5)
        if response.status_code == 200:
            health_status["services"]["selenium"] = "ok"
        else:
            health_status["services"]["selenium"] = f"error: status {response.status_code}"
            health_status["status"] = "degraded"
    except Exception as e:
        health_status["services"]["selenium"] = f"error: {str(e)}"
        health_status["status"] = "degraded"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    try:
        car_count = scrape_cache.count_documents({})
        health_status["services"]["car_cache"] = f"ok ({car_count} cars)"
    except Exception as e:
        health_status["services"]["car_cache"] = f"error: {str(e)}"
        health_status["status"] = "degraded"
    
    return health_status

@app.get("/api/debug/page-source")
def get_debug_page_source():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π HTML –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    try:
        if os.path.exists("debug_page_source.html"):
            with open("debug_page_source.html", "r", encoding="utf-8") as f:
                content = f.read()
            return {
                "status": "ok",
                "content": content[:50000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50KB
                "full_length": len(content),
                "message": "HTML source from last scraping attempt"
            }
        else:
            return {
                "status": "not_found",
                "message": "No debug page source found. Run scraping first."
            }
    except Exception as e:
        return {
            "status": "error",
            "message": str(e)
        }

@app.get("/api/debug/selectors-test")
def test_selectors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    try:
        if not os.path.exists("debug_page_source.html"):
            return {
                "status": "not_found",
                "message": "No debug page source found. Run scraping first."
            }
        
        with open("debug_page_source.html", "r", encoding="utf-8") as f:
            content = f.read()
        
        soup = BeautifulSoup(content, "html.parser")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        selectors_to_test = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            "li.cxc-card",
            "li.cards-li",
            "li.list-photo-li",
            ".cxc-card",
            ".cards-li",
            ".list-photo-li",
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "li.cards-li.cxc-card",
            "li.list-photo-li.cxc-card",
            "li.cards-li.list-photo-li",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "div[class*='viewlist_li']",
            "li[class*='list-item']", 
            "div[class*='list-item']",
            "div[class*='car-card']",
            "div[class*='item-pic']",
            "div[class*='pic-box']",
            "div[class*='result']",
            ".list-item",
            "article",
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
            ".vehicle-search-list",
            ".vehicle-second-list",
            ".tp-cards-tofu",
            ".right-sidebar-car"
        ]
        
        results = {}
        
        for selector in selectors_to_test:
            elements = soup.select(selector)
            results[selector] = {
                "count": len(elements),
                "sample_classes": [elem.get('class', []) for elem in elements[:3]],
                "sample_text": [elem.get_text()[:100].strip() for elem in elements[:3]]
            }
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        all_divs = soup.find_all(['div', 'li', 'article'])
        unique_classes = set()
        for div in all_divs:
            classes = div.get('class', [])
            for cls in classes:
                if any(keyword in cls.lower() for keyword in ['list', 'item', 'car', 'card', 'photo', 'wrap']):
                    unique_classes.add(cls)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        car_cards = soup.select("li.cxc-card")
        card_analysis = {}
        if car_cards:
            sample_card = car_cards[0]
            card_analysis = {
                "total_cards": len(car_cards),
                "sample_id": sample_card.get('id', ''),
                "sample_classes": sample_card.get('class', []),
                "sample_attributes": {k: v for k, v in sample_card.attrs.items() if k not in ['class', 'id']},
                "has_link": bool(sample_card.find('a')),
                "has_image": bool(sample_card.find('img')),
                "has_price": bool(sample_card.find(text=lambda text: text and '‰∏á' in text))
            }
        
        return {
            "status": "ok",
            "selector_results": results,
            "interesting_classes": sorted(list(unique_classes)),
            "total_divs": len(all_divs),
            "card_analysis": card_analysis
        }
        
    except Exception as e:
        return {
            "status": "error",
            "message": str(e)
        }

@app.post("/api/debug/test-selector")
def test_custom_selector(data: dict):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    try:
        selector = data.get("selector", "")
        if not selector:
            return {
                "status": "error",
                "message": "Selector is required"
            }
        
        if not os.path.exists("debug_page_source.html"):
            return {
                "status": "not_found",
                "message": "No debug page source found. Run scraping first."
            }
        
        with open("debug_page_source.html", "r", encoding="utf-8") as f:
            content = f.read()
        
        soup = BeautifulSoup(content, "html.parser")
        elements = soup.select(selector)
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        analysis = {
            "count": len(elements),
            "sample_classes": [elem.get('class', []) for elem in elements[:5]],
            "sample_text": [elem.get_text()[:200].strip() for elem in elements[:5]],
            "sample_ids": [elem.get('id', '') for elem in elements[:5]],
            "sample_attributes": []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–µ—Ä–≤—ã—Ö 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for elem in elements[:3]:
            attrs = {k: v for k, v in elem.attrs.items() if k not in ['class', 'id']}
            analysis["sample_attributes"].append(attrs)
        
        return {
            "status": "ok",
            "selector": selector,
            "analysis": analysis
        }
        
    except Exception as e:
        return {
            "status": "error",
            "message": str(e)
        }

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞—è–≤–æ–∫
@app.post("/api/applications/credit")
def submit_credit_application(application_data: dict, current_user = Depends(get_current_user)):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['firstName', 'lastName', 'phone', 'amount', 'term', 'monthlyIncome']
        missing_fields = [field for field in required_fields if not application_data.get(field)]
        
        if missing_fields:
            raise HTTPException(
                status_code=400, 
                detail=f"Missing required fields: {', '.join(missing_fields)}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        credit_application = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            "application_type": "credit",
            "status": "new",
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            
            # –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "personal_data": {
                "first_name": application_data.get("firstName"),
                "last_name": application_data.get("lastName"),
                "phone": application_data.get("phone"),
                "email": application_data.get("email")
            },
            
            # –î–∞–Ω–Ω—ã–µ –æ –∫—Ä–µ–¥–∏—Ç–µ
            "credit_data": {
                "amount": float(application_data.get("amount", 0)),
                "term": int(application_data.get("term", 0)),
                "down_payment": float(application_data.get("downPayment", 0)),
                "monthly_income": float(application_data.get("monthlyIncome", 0))
            },
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "comment": application_data.get("comment", ""),
            
            # Telegram –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            "telegram_data": None,
            "user_id": None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if current_user:
            credit_application["telegram_data"] = {
                "user_id": current_user.get("user_id"),
                "username": current_user.get("username"),
                "first_name": current_user.get("first_name"),
                "last_name": current_user.get("last_name")
            }
            credit_application["user_id"] = current_user.get("user_id")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º telegramUser –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        telegram_user = application_data.get("telegramUser")
        if telegram_user and not current_user:
            credit_application["telegram_data"] = {
                "user_id": telegram_user.get("id"),
                "username": telegram_user.get("username"),
                "first_name": telegram_user.get("first_name"),
                "last_name": telegram_user.get("last_name")
            }
            credit_application["user_id"] = telegram_user.get("id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        result = credit_applications.insert_one(credit_application)
        
        print(f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ID {result.inserted_id}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application_data.get('firstName')} {application_data.get('lastName')}")
        print(f"   –°—É–º–º–∞: {application_data.get('amount')} ‚ÇΩ")
        print(f"   Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–î–∞' if current_user or telegram_user else '–ù–µ—Ç'}")
        if credit_application["telegram_data"]:
            print(f"   Telegram: @{credit_application['telegram_data']['username']}")
        
        return {
            "success": True,
            "application_id": str(result.inserted_id),
            "message": "Credit application submitted successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to submit application: {str(e)}")

@app.post("/api/applications/leasing")
def submit_leasing_application(application_data: dict, current_user = Depends(get_current_user)):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–∏–∑–∏–Ω–≥"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['firstName', 'lastName', 'phone', 'leasingType', 'propertyValue', 'term']
        missing_fields = [field for field in required_fields if not application_data.get(field)]
        
        if missing_fields:
            raise HTTPException(
                status_code=400, 
                detail=f"Missing required fields: {', '.join(missing_fields)}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        leasing_application = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            "application_type": "leasing",
            "status": "new",
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            
            # –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "personal_data": {
                "first_name": application_data.get("firstName"),
                "last_name": application_data.get("lastName"),
                "phone": application_data.get("phone"),
                "email": application_data.get("email")
            },
            
            # –î–∞–Ω–Ω—ã–µ –æ –ª–∏–∑–∏–Ω–≥–µ
            "leasing_data": {
                "leasing_type": application_data.get("leasingType"),
                "property_value": float(application_data.get("propertyValue", 0)),
                "term": int(application_data.get("term", 0)),
                "down_payment": float(application_data.get("downPayment", 0))
            },
            
            # –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏
            "company_data": {
                "company_name": application_data.get("companyName"),
                "inn": application_data.get("inn"),
                "monthly_income": float(application_data.get("monthlyIncome", 0)),
                "business_type": application_data.get("businessType")
            },
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "comment": application_data.get("comment", ""),
            
            # Telegram –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            "telegram_data": None,
            "user_id": None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if current_user:
            leasing_application["telegram_data"] = {
                "user_id": current_user.get("user_id"),
                "username": current_user.get("username"),
                "first_name": current_user.get("first_name"),
                "last_name": current_user.get("last_name")
            }
            leasing_application["user_id"] = current_user.get("user_id")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º telegramUser –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        telegram_user = application_data.get("telegramUser")
        if telegram_user and not current_user:
            leasing_application["telegram_data"] = {
                "user_id": telegram_user.get("id"),
                "username": telegram_user.get("username"),
                "first_name": telegram_user.get("first_name"),
                "last_name": telegram_user.get("last_name")
            }
            leasing_application["user_id"] = telegram_user.get("id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        result = leasing_applications.insert_one(leasing_application)
        
        print(f"‚úÖ –õ–∏–∑–∏–Ω–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ID {result.inserted_id}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application_data.get('firstName')} {application_data.get('lastName')}")
        print(f"   –¢–∏–ø –ª–∏–∑–∏–Ω–≥–∞: {application_data.get('leasingType')}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {application_data.get('propertyValue')} ‚ÇΩ")
        print(f"   Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–î–∞' if current_user or telegram_user else '–ù–µ—Ç'}")
        if leasing_application["telegram_data"]:
            print(f"   Telegram: @{leasing_application['telegram_data']['username']}")
        
        return {
            "success": True,
            "application_id": str(result.inserted_id),
            "message": "Leasing application submitted successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–∑–∏–Ω–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to submit application: {str(e)}")

@app.get("/api/applications/stats")
def get_applications_stats():  # current_user = Depends(get_current_user_or_debug)
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ (–í–†–ï–ú–ï–ù–ù–û –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í)"""
    # if not current_user:
    #     raise HTTPException(status_code=401, detail="Authentication required")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        credit_stats = {
            "total": credit_applications.count_documents({}),
            "new": credit_applications.count_documents({"status": "new"}),
            "processing": credit_applications.count_documents({"status": "processing"}),
            "approved": credit_applications.count_documents({"status": "approved"}),
            "rejected": credit_applications.count_documents({"status": "rejected"})
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–∑–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        leasing_stats = {
            "total": leasing_applications.count_documents({}),
            "new": leasing_applications.count_documents({"status": "new"}),
            "processing": leasing_applications.count_documents({"status": "processing"}),
            "approved": leasing_applications.count_documents({"status": "approved"}),
            "rejected": leasing_applications.count_documents({"status": "rejected"})
        }
        
        return {
            "credit": credit_stats,
            "leasing": leasing_stats,
            "total_applications": credit_stats["total"] + leasing_stats["total"]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get statistics: {str(e)}")

@app.get("/api/applications/credit")
def get_credit_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
    # current_user = Depends(get_current_user_or_debug)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–í–†–ï–ú–ï–ù–ù–û –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í)"""
    # if not current_user:
    #     raise HTTPException(status_code=401, detail="Authentication required")
    
    try:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        filter_query = {}
        if status:
            filter_query["status"] = status
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total = credit_applications.count_documents(filter_query)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        skip = (page - 1) * page_size
        applications = list(credit_applications.find(
            filter_query
        ).skip(skip).limit(page_size).sort("created_at", -1))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for app in applications:
            app["_id"] = str(app["_id"])
        
        return {
            "total": total,
            "page": page,
            "page_size": page_size,
            "data": applications
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get applications: {str(e)}")

@app.get("/api/applications/leasing")
def get_leasing_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
    # current_user = Depends(get_current_user_or_debug)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–∑–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–í–†–ï–ú–ï–ù–ù–û –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í)"""
    # if not current_user:
    #     raise HTTPException(status_code=401, detail="Authentication required")
    
    try:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        filter_query = {}
        if status:
            filter_query["status"] = status
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total = leasing_applications.count_documents(filter_query)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        skip = (page - 1) * page_size
        applications = list(leasing_applications.find(
            filter_query
        ).skip(skip).limit(page_size).sort("created_at", -1))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for app in applications:
            app["_id"] = str(app["_id"])
        
        return {
            "total": total,
            "page": page,
            "page_size": page_size,
            "data": applications
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get applications: {str(e)}")

@app.put("/api/applications/{application_type}/{application_id}/status")
def update_application_status(
    application_type: str,
    application_id: str,
    status_data: dict,
    # current_user = Depends(get_current_user_or_debug)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–í–†–ï–ú–ï–ù–ù–û –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í)"""
    # if not current_user:
    #     raise HTTPException(status_code=401, detail="Authentication required")
    
    try:
        new_status = status_data.get("status")
        if not new_status:
            raise HTTPException(status_code=400, detail="Status is required")
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        collection = None
        if application_type == "credit":
            collection = credit_applications
        elif application_type == "leasing":
            collection = leasing_applications
        else:
            raise HTTPException(status_code=400, detail="Invalid application type")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
        try:
            object_id = ObjectId(application_id)
        except Exception:
            raise HTTPException(status_code=400, detail="Invalid application ID")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        result = collection.update_one(
            {"_id": object_id},
            {
                "$set": {
                    "status": new_status,
                    "updated_at": datetime.utcnow()
                }
            }
        )
        
        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Application not found")
        
        return {
            "success": True,
            "message": f"Application status updated to {new_status}"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to update status: {str(e)}")

import re

def structure_car_data(car_data):
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∏–∑–≤–ª–µ–∫–∞—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ title
    """
    title = car_data.get("title", "")
    price = car_data.get("price", "0‰∏á")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞
    def extract_year(text):
        # print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑: {text}")
        
        # –ò—â–µ–º 4-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–æ–¥–∞–º–∏ (1990-2024)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        year_patterns = [
            r'\b(20[0-2][0-9])\b',  # 2020, 2021, 2022, 2023, 2024
            r'\b(19[9][0-9])\b',    # 1990-1999
            r'(20[0-2][0-9])',      # –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞
            r'(19[9][0-9])'         # –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞
        ]
        
        for pattern in year_patterns:
            year_match = re.search(pattern, text)
            if year_match:
                year = int(year_match.group())
                # print(f"   –ù–∞–π–¥–µ–Ω –≥–æ–¥: {year}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                if year >= 1990 and year <= 2024:
                    return year
                else:
                    print(f"   –ì–æ–¥ {year} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤")
        
        print(f"   –ì–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {text}")
        return None
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–∫–∏—Ç–∞–π—Å–∫–∏–µ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)
    def extract_brand(text):
        chinese_brands = [
            'Â•îÈ©∞', 'ÂÆùÈ©¨', 'Â••Ëø™', 'Â§ß‰ºó', '‰∏∞Áî∞', 'Êú¨Áî∞', 'Êó•‰∫ß', 'È©¨Ëá™Ëææ', 'ÊñØÂ∑¥È≤Å', 'Èõ∑ÂÖãËê®ÊñØ',
            'Áé∞‰ª£', 'Ëµ∑‰∫ö', 'ÁâπÊñØÊãâ', 'ÊØî‰∫öËø™', 'ËîöÊù•', 'Â∞èÈπè', 'ÁêÜÊÉ≥', 'ÂêâÂà©', 'ÈïøÂüé', 'ÂìàÂºó',
            'ÂçöË∂ä', 'ÊòüË∂ä', 'Â®ÅÂ∞îÊ≥ï', 'Ë∑ØËôé', 'Âåó‰∫¨Ë∂äÈáé', 'ÂìàÂºóÂ§ßÁãó', 'Polo'
        ]
        
        english_brands = [
            'BMW', 'Mercedes', 'Audi', 'Volkswagen', 'Toyota', 'Honda', 'Nissan', 'Mazda',
            'Subaru', 'Lexus', 'Hyundai', 'KIA', 'Tesla', 'BYD', 'NIO', 'XPeng', 'Li Auto',
            'Geely', 'Great Wall', 'Haval', 'Land Rover'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
        for brand in chinese_brands:
            if brand in text:
                return brand
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
        for brand in english_brands:
            if brand.lower() in text.lower():
                return brand
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        words = text.split()
        return words[0] if words else "Unknown"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    def extract_model(text, brand):
        if not brand or brand == "Unknown":
            return "Unknown Model"
        
        # –£–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        text_without_brand = text.replace(brand, '').strip()
        
        # –ò—â–µ–º –≥–æ–¥ –∏ —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        year_match = re.search(r'\b(20[0-2][0-9]|19[9][0-9])\b', text_without_brand)
        if year_match:
            text_without_brand = text_without_brand.replace(year_match.group(), '').strip()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∫–∞–∫ –º–æ–¥–µ–ª—å
        words = text_without_brand.split()
        model_words = []
        for word in words[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
            if word and not re.match(r'^\d+[\.\d]*[LT]?$', word):  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–º—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
                model_words.append(word)
        
        return ' '.join(model_words) if model_words else "Unknown Model"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    def extract_engine_volume(text):
        volume_match = re.search(r'(\d+\.?\d*)[LT]', text)
        return f"{volume_match.group(1)}L" if volume_match else None
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
    def extract_transmission(text):
        if any(keyword in text for keyword in ['Ëá™Âä®', 'DCT', 'CVT', 'AT']):
            return 'Automatic'
        elif any(keyword in text for keyword in ['ÊâãÂä®', 'MT', 'ÊâãÊå°']):
            return 'Manual'
        return 'Unknown'
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
    def extract_fuel_type(text):
        if any(keyword in text for keyword in ['Ê∑∑Âä®', 'HV', 'ÂèåÊìé', 'Hybrid']):
            return 'Hybrid'
        elif any(keyword in text for keyword in ['ÁîµÂä®', 'EV', 'Á∫ØÁîµ']):
            return 'Electric'
        elif any(keyword in text for keyword in ['Êü¥Ê≤π', 'Diesel', 'TDI', 'CDI']):
            return 'Diesel'
        elif any(keyword in text for keyword in ['Ê±ΩÊ≤π', 'TFSI', 'TSI', 'Petrol']):
            return 'Petrol'
        return 'Petrol'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–Ω–∑–∏–Ω
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–≤–æ–¥–∞
    def extract_drive_type(text):
        if any(keyword in text for keyword in ['ÂõõÈ©±', '4WD', 'AWD', '4MATIC', 'xDrive', 'quattro']):
            return 'AWD'
        elif any(keyword in text for keyword in ['ÂâçÈ©±', 'FWD']):
            return 'FWD'
        elif any(keyword in text for keyword in ['ÂêéÈ©±', 'RWD']):
            return 'RWD'
        return 'FWD'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥
    
    # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
    def parse_price(price_str):
        if not price_str:
            return 0
        
        # print(f"üîç –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É: {price_str}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "26.58‰∏á" –∏–ª–∏ "18.28‰∏á31.02‰∏á"
        price_match = re.search(r'(\d+\.?\d*)', str(price_str))
        if price_match:
            price_value = float(price_match.group())
            # print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price_value}‰∏á")
            return price_value
        
        print(f"   –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {price_str}")
        return 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    def get_country_by_brand(brand_name):
        country_mapping = {
            # –ù–µ–º–µ—Ü–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Â•îÈ©∞': 'germany', 'ÂÆùÈ©¨': 'germany', 'Â••Ëø™': 'germany', 'Â§ß‰ºó': 'germany',
            'BMW': 'germany', 'Mercedes': 'germany', 'Audi': 'germany', 'Volkswagen': 'germany',
            'ËøàÂ∑¥Ëµ´': 'germany', 'AMG': 'germany', '‰øùÊó∂Êç∑': 'germany', 'Porsche': 'germany',
            
            # –Ø–ø–æ–Ω—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            '‰∏∞Áî∞': 'japan', 'Êú¨Áî∞': 'japan', 'Êó•‰∫ß': 'japan', 'È©¨Ëá™Ëææ': 'japan', 'ÊñØÂ∑¥È≤Å': 'japan', 'Èõ∑ÂÖãËê®ÊñØ': 'japan',
            'Toyota': 'japan', 'Honda': 'japan', 'Nissan': 'japan', 'Mazda': 'japan', 'Subaru': 'japan', 'Lexus': 'japan',
            'Â••Âæ∑Ëµõ': 'japan', 'Ëã±Ëè≤Â∞ºËø™': 'japan', 'Infiniti': 'japan', 'ËÆ¥Ê≠å': 'japan', 'Acura': 'japan',
            
            # –ö–æ—Ä–µ–π—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Áé∞‰ª£': 'korea', 'Ëµ∑‰∫ö': 'korea', 'Hyundai': 'korea', 'KIA': 'korea',
            'Êç∑Â∞ºËµõÊÄù': 'korea', 'Genesis': 'korea',
            
            # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'ÁâπÊñØÊãâ': 'usa', 'Tesla': 'usa', 'Á¶èÁâπ': 'usa', 'Ford': 'usa', 'Èõ™‰ΩõÂÖ∞': 'usa', 'Chevrolet': 'usa',
            'ÂáØËø™ÊãâÂÖã': 'usa', 'Cadillac': 'usa', 'ÊûóËÇØ': 'usa', 'Lincoln': 'usa', 'Âà´ÂÖã': 'usa', 'Buick': 'usa',
            'Êé¢Èô©ËÄÖ': 'usa', 'Explorer': 'usa',
            
            # –ö–∏—Ç–∞–π—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'ÊØî‰∫öËø™': 'china', 'ËîöÊù•': 'china', 'Â∞èÈπè': 'china', 'ÁêÜÊÉ≥': 'china', 'ÂêâÂà©': 'china',
            'ÈïøÂüé': 'china', 'ÂìàÂºó': 'china', 'ÂçöË∂ä': 'china', 'ÊòüË∂ä': 'china', 'Â®ÅÂ∞îÊ≥ï': 'china',
            'ÂìàÂºóÂ§ßÁãó': 'china', 'Âåó‰∫¨Ë∂äÈáé': 'china', '‰º†Á•∫': 'china', 'ÂπøÊ±Ω': 'china',
            'BYD': 'china', 'NIO': 'china', 'XPeng': 'china', 'Li Auto': 'china', 'Geely': 'china',
            'Ê∑±Ëìù': 'china', 'ÈòøÁª¥Â°î': 'china', 'Èõ∂Ë∑ë': 'china', 'ÊûÅÁãê': 'china', '‰∏ñÁ∫™': 'china',
            
            # –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Ë∑ØËôé': 'uk', 'Land Rover': 'uk', 'ÊèΩËÉú': 'uk', 'Range Rover': 'uk', 'Êç∑Ë±π': 'uk', 'Jaguar': 'uk',
            'ËøàÂáØ‰º¶': 'uk', 'McLaren': 'uk', 'ÂÆæÂà©': 'uk', 'Bentley': 'uk', 'Âä≥ÊñØËé±ÊñØ': 'uk', 'Rolls-Royce': 'uk',
            
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Ê≥ïÊãâÂà©': 'italy', 'Ferrari': 'italy', 'ÂÖ∞ÂçöÂü∫Â∞º': 'italy', 'Lamborghini': 'italy',
            'ÁéõËééÊãâËíÇ': 'italy', 'Maserati': 'italy', 'ÈòøÂ∞îÊ≥ïÁΩóÂØÜÊ¨ß': 'italy', 'Alfa Romeo': 'italy',
            
            # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Ê†áËá¥': 'france', 'Peugeot': 'france', 'Èõ™ÈìÅÈæô': 'france', 'Citro√´n': 'france',
            'Èõ∑ËØ∫': 'france', 'Renault': 'france', 'DS': 'france',
            
            # –®–≤–µ–¥—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            'Ê≤ÉÂ∞îÊ≤É': 'sweden', 'Volvo': 'sweden',
            
            # –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã
            '‰øùÊó∂Êç∑': 'switzerland', 'Porsche': 'switzerland'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if brand_name in country_mapping:
            return country_mapping[brand_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for brand, country in country_mapping.items():
            if brand in brand_name or brand_name in brand:
                return country
        
        return 'unknown'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    year = extract_year(title)
    brand = extract_brand(title)
    model = extract_model(title, brand)
    price_value = parse_price(price)
    country = get_country_by_brand(brand)
    
    # print(f"üìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {title}")
    # print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –≥–æ–¥: {year}")
    # print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥: {brand}")
    # print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model}")
    # print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price_value}‰∏á")
    # print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}")
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    structured_car = {
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "id": car_data.get("car_id", ""),
        "title": title,
        "brand": brand,
        "model": model,
        "year": year,
        "country": country,
        
        # –¶–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        "price_value": price_value,
        "price_formatted": price,
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –µ—Å—Ç—å)
        "image_url": car_data.get("image_url", ""),
        "local_image_url": car_data.get("local_image_url", ""),
		"images": [car_data.get("local_image_url", "")] if car_data.get("local_image_url") else [],
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        "source": "che168",
        "scraped_at": datetime.now().isoformat()
    }
    
    # print(f"üìã –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {title}")
    # print(f"   –ë—Ä–µ–Ω–¥: {brand}, –ú–æ–¥–µ–ª—å: {model}, –ì–æ–¥: {year}")
    # print(f"   –¶–µ–Ω–∞: {price_value}‰∏á, –°—Ç—Ä–∞–Ω–∞: {country}")
    
    return structured_car 

@app.post("/api/auth/save-phone")
def save_phone(data: dict, current_user = Depends(get_current_user)):
    # """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")

    phone = (data or {}).get("phone", "")
    if not isinstance(phone, str) or len(phone) < 5:
        raise HTTPException(status_code=400, detail="Invalid phone")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä: –æ—Å—Ç–∞–≤–ª—è–µ–º + –∏ —Ü–∏—Ñ—Ä—ã
    normalized = re.sub(r"[^0-9+]", "", phone)
    if not re.search(r"\d{5,}", normalized):
        raise HTTPException(status_code=400, detail="Invalid phone format")

    telegram_id = current_user.get("user_id")
    if not telegram_id:
        raise HTTPException(status_code=400, detail="Missing user id")

    users_collection.update_one(
        {"telegram_id": telegram_id},
        {"$set": {"phone": normalized, "updated_at": datetime.utcnow()}},
        upsert=True,
    )

    user = users_collection.find_one({"telegram_id": telegram_id}, {"_id": 0})
    return {"success": True, "user": user}


@app.get("/api/auth/me")
def get_me(current_user = Depends(get_current_user)):
    # """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")

    telegram_id = current_user.get("user_id")
    user = users_collection.find_one({"telegram_id": telegram_id}, {"_id": 0})
    if not user:
        # –í–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç—è –±—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞
        user = {
            "telegram_id": telegram_id,
            "username": current_user.get("username"),
            "first_name": current_user.get("first_name"),
        }
    return {"success": True, "user": user}


@app.post("/api/telegram/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    # """–ü—Ä–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ Telegram. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    if token != TELEGRAM_BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Invalid token")

    try:
        update = await request.json()
    except Exception:
        update = {}

    message = (update or {}).get("message", {})
    contact = message.get("contact") or {}

    if contact and contact.get("phone_number"):
        phone_number = contact.get("phone_number")
        owner_id = contact.get("user_id") or (message.get("from") or {}).get("id")
        if owner_id:
            normalized = re.sub(r"[^0-9+]", "", str(phone_number))
            users_collection.update_one(
                {"telegram_id": owner_id},
                {"$set": {"phone": normalized, "updated_at": datetime.utcnow()}},
                upsert=True,
            )
            print(f"‚úÖ Phone saved for user {owner_id}: {normalized}")

    return {"ok": True}

# ====== –û—Ç–∑—ã–≤—ã: —Å–ø–∏—Å–æ–∫, —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ ======
@app.get("/api/reviews")
def get_reviews(page: int = 1, page_size: int = 10, rating: Optional[int] = None, status: Optional[str] = None):
    try:
        skip = (page - 1) * page_size
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
        query: dict = {}
        if rating is not None:
            try:
                rating_int = int(rating)
                if rating_int < 1 or rating_int > 5:
                    raise HTTPException(status_code=400, detail="Rating must be between 1 and 5")
                query["rating"] = rating_int
            except Exception:
                raise HTTPException(status_code=400, detail="Invalid rating")
        if status:
            if status not in ("new", "processed"):
                raise HTTPException(status_code=400, detail="Invalid status")
            if status == "new":
                # –°—Ç–∞—Ç—É—Å –Ω–æ–≤—ã–π: –ª–∏–±–æ —è–≤–Ω–æ status=new, –ª–∏–±–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
                query["$or"] = [{"status": "new"}, {"reply": None}]
            elif status == "processed":
                # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –ª–∏–±–æ —è–≤–Ω–æ status=processed, –ª–∏–±–æ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
                query["$or"] = [{"status": "processed"}, {"reply": {"$ne": None}}]

        total = reviews_collection.count_documents(query)
        items = list(
            reviews_collection
            .find(query)
            .skip(skip)
            .limit(page_size)
            .sort("created_at", -1)
        )
        for item in items:
            item["_id"] = str(item["_id"]) 
        return {"total": total, "page": page, "page_size": page_size, "data": items}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get reviews: {str(e)}")

@app.post("/api/reviews")
def create_review(payload: dict, current_user = Depends(get_current_user)):
    try:
        if not current_user:
            raise HTTPException(status_code=401, detail="Not authenticated")

        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ —Å fallback –Ω–∞ –ë–î
        telegram_id = (current_user or {}).get("user_id")
        db_user = users_collection.find_one({"telegram_id": telegram_id}) or {}
        first_name = (current_user or {}).get("first_name") or db_user.get("first_name") or ""
        last_name = (current_user or {}).get("last_name") or db_user.get("last_name") or ""
        username = (current_user or {}).get("username") or db_user.get("username") or ""
        full_name = (f"{first_name} {last_name}".strip()) or (f"@{username}" if username else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        message = (payload or {}).get("message", "").strip()
        rating = int((payload or {}).get("rating", 0))
        if rating < 1 or rating > 5:
            raise HTTPException(status_code=400, detail="Rating must be between 1 and 5")
        if not message or len(message) < 3:
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        doc = {
            "name": full_name,
            "message": message,
            "rating": rating,
            "created_at": datetime.utcnow(),
            "reply": None,
            "reply_author": None,
            "reply_at": None,
            "user": None,
            "status": "new",
        }
        doc["user"] = {
            "user_id": telegram_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
        }
        result = reviews_collection.insert_one(doc)
        doc["_id"] = str(result.inserted_id)
        return {"success": True, "data": doc}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create review: {str(e)}")

@app.post("/api/reviews/{review_id}/reply")
def reply_review(review_id: str, payload: dict, current_user = Depends(get_current_user)):
    try:
        if not current_user:
            raise HTTPException(status_code=401, detail="Not authenticated")

        reply_text = (payload or {}).get("reply", "").strip()
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback –Ω–∞ –ë–î)
        telegram_id = (current_user or {}).get("user_id")
        db_user = users_collection.find_one({"telegram_id": telegram_id}) or {}
        first_name = (current_user or {}).get("first_name") or db_user.get("first_name") or ""
        last_name = (current_user or {}).get("last_name") or db_user.get("last_name") or ""
        username = (current_user or {}).get("username") or db_user.get("username") or ""
        reply_author = (f"{first_name} {last_name}".strip()) or (f"@{username}" if username else "–ú–µ–Ω–µ–¥–∂–µ—Ä")
        if not reply_text:
            raise HTTPException(status_code=400, detail="Reply is required")
        try:
            oid = ObjectId(review_id)
        except Exception:
            raise HTTPException(status_code=400, detail="Invalid review ID")
        result = reviews_collection.update_one(
            {"_id": oid},
            {"$set": {"reply": reply_text, "reply_author": reply_author, "reply_at": datetime.utcnow(), "status": "processed"}}
        )
        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Review not found")
        return {"success": True}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to reply: {str(e)}")

@app.delete("/api/reviews/{review_id}")
def delete_review(review_id: str):  # –í–†–ï–ú–ï–ù–ù–û –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    try:
        try:
            oid = ObjectId(review_id)
        except Exception:
            raise HTTPException(status_code=400, detail="Invalid review ID")
        result = reviews_collection.delete_one({"_id": oid})
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Review not found")
        return {"success": True}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete: {str(e)}")

@app.patch("/api/reviews/{review_id}")
def update_review(review_id: str, payload: dict, current_user = Depends(get_current_user)):
    # """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (message, rating)."""
    try:
        if not current_user:
            raise HTTPException(status_code=401, detail="Not authenticated")

        try:
            oid = ObjectId(review_id)
        except Exception:
            raise HTTPException(status_code=400, detail="Invalid review ID")

        review = reviews_collection.find_one({"_id": oid})
        if not review:
            raise HTTPException(status_code=404, detail="Review not found")

        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
        owner_id = str(((review or {}).get("user") or {}).get("user_id") or "")
        current_id = str(current_user.get("user_id") or "")
        if not owner_id or owner_id != current_id:
            raise HTTPException(status_code=403, detail="Forbidden")

        updates = {}
        if "message" in payload:
            message = (payload.get("message") or "").strip()
            if len(message) < 3:
                raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
            updates["message"] = message
        if "rating" in payload:
            try:
                rating = int(payload.get("rating"))
            except Exception:
                raise HTTPException(status_code=400, detail="Invalid rating")
            if rating < 1 or rating > 5:
                raise HTTPException(status_code=400, detail="Rating must be between 1 and 5")
            updates["rating"] = rating

        if not updates:
            return {"success": True}

        updates["updated_at"] = datetime.utcnow()
        reviews_collection.update_one({"_id": oid}, {"$set": updates})
        return {"success": True}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to update review: {str(e)}")