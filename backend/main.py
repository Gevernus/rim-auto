from fastapi import FastAPI, Query, HTTPException, Depends, Request
from fastapi import UploadFile, File, Form
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
from pathlib import Path
import re

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from app.config.settings import (
    CORS_ORIGINS, 
    STATIC_IMAGES_DIR, 
    CONTRACTS_DIR, 
    ALLOWED_CONTRACT_TYPES
)
from app.config.database import client
from app.services.auth_service import (
    verify_telegram_auth, 
    create_jwt_token, 
    verify_jwt_token, 
    save_user_to_db
)
from app.services.car_service import (
    get_scraped_cars, 
    refresh_cache, 
    get_cars_with_filters
)
from app.services.contract_service import (
    list_contracts, 
    get_contract, 
    upload_contract, 
    delete_contract
)
from app.services.application_service import (
    submit_credit_application, 
    submit_leasing_application,
    get_applications_stats,
    get_credit_applications,
    get_leasing_applications,
    update_application_status
)
from app.services.direct_leasing_service import (
    submit_direct_leasing_application,
    get_direct_leasing_stats,
    get_direct_leasing_applications,
    get_direct_leasing_application,
    update_direct_leasing_status,
    delete_direct_leasing_application
)
from app.services.carcade_leasing_service import (
    submit_carcade_leasing_application,
    get_carcade_leasing_stats,
    get_carcade_leasing_applications,
    get_carcade_leasing_application,
    update_carcade_leasing_status,
    delete_carcade_leasing_application
)
from app.services.city_service import (
    create_city,
    get_cities,
    get_city_by_id,
    update_city,
    delete_city,
    search_cities,
    get_delivery_regions,
    initialize_default_cities
)
from app.services.delivery_zone_service import (
    create_delivery_zone, get_delivery_zones, get_delivery_zone_by_id,
    update_delivery_zone, delete_delivery_zone, initialize_default_delivery_zones
)
from app.models.city import CityCreate, CityUpdate
from app.models.delivery_zone import DeliveryZoneCreate, DeliveryZoneUpdate
from app.services.review_service import (
    get_reviews, 
    create_review, 
    reply_review, 
    delete_review, 
    update_review
)
from app.services.user_service import (
    save_phone, 
    get_user_profile, 
    save_phone_from_telegram
)
from app.services.system_service import (
    get_health_status,
    get_images_stats,
    get_volumes_stats,
    cleanup_images,
    cleanup_contracts,
    get_debug_page_source,
    test_selectors,
    test_custom_selector
)

app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ frontend –∫ backend
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    initialize_default_delivery_zones()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞
    print("üèôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤...")
    initialize_default_cities()
    
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ü—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (Docker volumes)
app.mount("/static", StaticFiles(directory="static"), name="static")

# Security
security = HTTPBearer(auto_error=False)

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    if not credentials:
        return None
    
    user_data = verify_jwt_token(credentials.credentials)
    if not user_data:
        return None
    
    return user_data

def get_current_user_or_debug(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç debug —Ä–µ–∂–∏–º"""
    if not credentials:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
    user_data = verify_jwt_token(credentials.credentials)
    if user_data:
        return user_data
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º debug —Ç–æ–∫–µ–Ω
    try:
        import base64
        import json
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 —Ç–æ–∫–µ–Ω
        decoded_token = base64.b64decode(credentials.credentials).decode('utf-8')
        debug_data = json.loads(decoded_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ debug —Ç–æ–∫–µ–Ω
        if debug_data.get('debug') and debug_data.get('user'):
            user_info = debug_data['user']
            return {
                "user_id": user_info.get('id'),
                "username": user_info.get('username'),
                "first_name": user_info.get('name', '').split()[0] if user_info.get('name') else '',
                "last_name": ' '.join(user_info.get('name', '').split()[1:]) if user_info.get('name') else '',
                "is_debug": True
            }
    except Exception as e:
        print(f"Debug token parsing error: {e}")
        return None
    
    return None

# ====== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ======
@app.post("/api/auth/telegram-webapp")
def auth_telegram_webapp(auth_data: dict):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑ Telegram WebApp"""
    try:
        init_data = auth_data.get("initData")
        user_data = auth_data.get("user")
        
        if not init_data or not user_data:
            raise HTTPException(status_code=400, detail="Missing initData or user data")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è initData
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_user = save_user_to_db(user_data)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = create_jwt_token(user_data)
        
        return {
            "success": True,
            "user": saved_user,
            "token": token,
            "message": "Successful authentication"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Authentication failed: {str(e)}")

@app.post("/api/auth/telegram-web")
def auth_telegram_web(auth_data: dict):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Login Widget"""
    if not verify_telegram_auth(auth_data.copy()):
        raise HTTPException(status_code=403, detail="Invalid authentication data")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    saved_user = save_user_to_db(auth_data)
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    token = create_jwt_token(auth_data)
    
    return {
        "success": True,
        "user": saved_user,
        "token": token,
        "message": "Successful authentication"
    }

@app.get("/api/auth/validate")
def validate_token(current_user = Depends(get_current_user)):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Invalid or expired token")
    
    return {
        "valid": True,
        "user": current_user
    }

@app.post("/api/auth/logout")
def logout(current_user = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    # –í –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å blacklist —Ç–æ–∫–µ–Ω–æ–≤
    return {
        "success": True,
        "message": "Successfully logged out"
    }

@app.post("/api/auth/telegram")
async def auth_telegram(request: Request):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è Login Widget (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ form-data)"""
    try:
        content_type = request.headers.get("content-type", "")
        auth_data = None

        if "application/json" in content_type:
            auth_data = await request.json()
        elif "application/x-www-form-urlencoded" in content_type or "multipart/form-data" in content_type:
            form = await request.form()
            # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ str –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            auth_data = {k: (v if isinstance(v, str) else str(v)) for k, v in form.items()}
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º JSON –∫–∞–∫ fallback
            try:
                auth_data = await request.json()
            except Exception:
                auth_data = None

        if not isinstance(auth_data, dict) or not auth_data:
            raise HTTPException(status_code=400, detail="Invalid or empty auth data")

        if not verify_telegram_auth(auth_data.copy()):
            raise HTTPException(status_code=403, detail="Invalid authentication data")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        saved_user = save_user_to_db(auth_data)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = create_jwt_token(auth_data)
        
        return {
            "success": True,
            "user": saved_user,
            "token": token,
            "message": "Successful authentication"
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Authentication failed: {str(e)}")

@app.post("/api/auth/save-phone")
def auth_save_phone(data: dict, current_user = Depends(get_current_user)):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    phone = (data or {}).get("phone", "")
    return save_phone(phone, current_user)

@app.get("/api/auth/me")
def auth_get_me(current_user = Depends(get_current_user)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    return get_user_profile(current_user)

# ====== –ê–í–¢–û–ú–û–ë–ò–õ–ò ======
@app.get("/api/scrape-cars")
def api_get_scraped_cars():
    """Returns scraped car data, using cache if available."""
    return get_scraped_cars()

@app.post("/api/refresh-cache")
def api_refresh_cache():
    """Force refresh the car cache by scraping new data."""
    return refresh_cache()

@app.get("/api/cars")
def api_get_cars(
    page: int = 1,
    page_size: int = 10,
    sort_by: Optional[str] = None,
    sort_order: str = "asc",
    title: Optional[str] = None,
    price_from: Optional[str] = None,
    price_to: Optional[str] = None,
    year_from: Optional[str] = None,
    year_to: Optional[str] = None,
    country: Optional[str] = None,
):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    return get_cars_with_filters(
        page=page,
        page_size=page_size,
        sort_by=sort_by,
        sort_order=sort_order,
        title=title,
        price_from=price_from,
        price_to=price_to,
        year_from=year_from,
        year_to=year_to,
        country=country
    )

# ====== –°–ò–°–¢–ï–ú–ê ======
@app.get("/api/health")
def api_get_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    return get_health_status()

@app.get("/api/images/stats")
def api_get_images_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    return get_images_stats()

@app.get("/api/volumes/stats")
def api_get_volumes_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É volumes (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä—ã)."""
    return get_volumes_stats()

@app.post("/api/images/cleanup")
def api_cleanup_images():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    return cleanup_images()

@app.post("/api/contracts/cleanup")
def api_cleanup_contracts():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏."""
    return cleanup_contracts()

# ====== –î–û–ì–û–í–û–†–´ ======
@app.get("/api/contracts")
def api_list_contracts():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤"""
    return list_contracts()

@app.get("/api/contracts/{contract_type}")
def api_get_contract(contract_type: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ —Ç–∏–ø—É"""
    return get_contract(contract_type)

@app.get("/static/contracts/{contract_type}.docx")
def serve_contract_file(contract_type: str):
    """–†–∞–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º"""
    if contract_type not in ALLOWED_CONTRACT_TYPES:
        raise HTTPException(status_code=400, detail="Invalid contract type")
    
    file_path = CONTRACTS_DIR / f"{contract_type}.docx"
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="Contract not found")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    response = FileResponse(
        path=file_path,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        filename=f"{contract_type}.docx"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    response.headers["Content-Type"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    return response

@app.post("/api/contracts/{contract_type}")
async def api_upload_contract(
    contract_type: str,
    file: UploadFile = File(...),
):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–≥–æ–≤–æ—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    return await upload_contract(contract_type, file)

@app.delete("/api/contracts/{contract_type}")
def api_delete_contract(contract_type: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    return delete_contract(contract_type)

# ====== –ó–ê–Ø–í–ö–ò ======
@app.post("/api/applications/credit")
def api_submit_credit_application(application_data: dict, current_user = Depends(get_current_user)):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç"""
    return submit_credit_application(application_data, current_user)

@app.post("/api/applications/leasing")
def api_submit_leasing_application(application_data: dict, current_user = Depends(get_current_user)):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–∏–∑–∏–Ω–≥"""
    return submit_leasing_application(application_data, current_user)

@app.post("/api/applications/direct-leasing")
async def api_submit_direct_leasing_application(
    request: Request,
    current_user = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º multipart/form-data
        form = await request.form()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
        for key, value in form.items():
            print(f"   {key}: {value}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application_data = {}
        files = {}
        
        for key, value in form.multi_items():
            if key.startswith('documents.'):
                doc_type = key.replace('documents.', '')
                if hasattr(value, 'filename') and value.filename:
                    # –ö–ª–∞–¥—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É
                    files.setdefault(doc_type, []).append(value)
                    print(f"üìÅ –§–∞–π–ª {doc_type}: {value.filename}")
            elif key == 'telegramUser':
                try:
                    import json
                    application_data[key] = json.loads(value)
                    print(f"üì± Telegram –¥–∞–Ω–Ω—ã–µ: {application_data[key]}")
                except:
                    application_data[key] = value
            elif key in ['propertyValue', 'term', 'downPayment']:
                try:
                    application_data[key] = float(value) if value else None
                    print(f"üìä –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ {key}: {application_data[key]}")
                except:
                    application_data[key] = value
            else:
                application_data[key] = value
                print(f"üìù –î–∞–Ω–Ω—ã–µ {key}: {value}")
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {application_data}")
        print(f"üìÅ –§–∞–π–ª—ã: {list(files.keys())}")
        
        return await submit_direct_leasing_application(application_data, files, current_user)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–π–Ω—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to submit application: {str(e)}")

@app.post("/api/applications/carcade-leasing")
async def api_submit_carcade_leasing_application(
    request: Request,
    current_user = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º multipart/form-data
        form = await request.form()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ö–∞—Ä–∫–∞–¥–µ:")
        for key, value in form.items():
            print(f"   {key}: {value}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application_data = {}
        files = {}
        
        for key, value in form.multi_items():
            if key.startswith('documents.'):
                doc_type = key.replace('documents.', '')
                if hasattr(value, 'filename') and value.filename:
                    # –ö–ª–∞–¥—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É
                    files.setdefault(doc_type, []).append(value)
                    print(f"üìÅ –§–∞–π–ª {doc_type}: {value.filename}")
            elif key == 'telegramUser':
                try:
                    import json
                    application_data[key] = json.loads(value)
                    print(f"üì± Telegram –¥–∞–Ω–Ω—ã–µ: {application_data[key]}")
                except:
                    application_data[key] = value
            elif key in ['propertyValue', 'term', 'downPayment']:
                try:
                    application_data[key] = float(value) if value else None
                    print(f"üìä –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ {key}: {application_data[key]}")
                except:
                    application_data[key] = value
            else:
                application_data[key] = value
                print(f"üìù –î–∞–Ω–Ω—ã–µ {key}: {value}")
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ö–∞—Ä–∫–∞–¥–µ: {application_data}")
        print(f"üìÅ –§–∞–π–ª—ã: {list(files.keys())}")
        
        return await submit_carcade_leasing_application(application_data, files, current_user)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–π–Ω—Ç–µ –ö–∞—Ä–∫–∞–¥–µ: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to submit application: {str(e)}")

@app.get("/api/applications/stats")
def api_get_applications_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫"""
    return get_applications_stats()

@app.get("/api/applications/direct-leasing/stats")
def api_get_direct_leasing_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥"""
    return get_direct_leasing_stats()

@app.get("/api/applications/carcade-leasing/stats")
def api_get_carcade_leasing_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥"""
    return get_carcade_leasing_stats()

@app.get("/api/applications/credit")
def api_get_credit_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    return get_credit_applications(page, page_size, status)

@app.get("/api/applications/leasing")
def api_get_leasing_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–∑–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"""
    return get_leasing_applications(page, page_size, status)

@app.get("/api/applications/direct-leasing")
def api_get_direct_leasing_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥"""
    return get_direct_leasing_applications(page, page_size, status)

@app.get("/api/applications/carcade-leasing")
def api_get_carcade_leasing_applications(
    page: int = 1,
    page_size: int = 10,
    status: Optional[str] = None,
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥"""
    return get_carcade_leasing_applications(page, page_size, status)

@app.get("/api/applications/direct-leasing/{application_id}")
def api_get_direct_leasing_application(application_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥ –ø–æ ID"""
    return get_direct_leasing_application(application_id)

@app.get("/api/applications/carcade-leasing/{application_id}")
def api_get_carcade_leasing_application(application_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥ –ø–æ ID"""
    return get_carcade_leasing_application(application_id)

@app.put("/api/applications/{application_type:credit|leasing}/{application_id}/status")
def api_update_application_status(
    application_type: str,
    application_id: str,
    status_data: dict,
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    return update_application_status(application_type, application_id, status_data)

@app.put("/api/applications/direct-leasing/{application_id}/status")
def api_update_direct_leasing_status(
    application_id: str,
    status_data: dict,
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥"""
    return update_direct_leasing_status(application_id, status_data)

@app.put("/api/applications/carcade-leasing/{application_id}/status")
def api_update_carcade_leasing_status(
    application_id: str,
    status_data: dict,
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥"""
    return update_carcade_leasing_status(application_id, status_data)

@app.delete("/api/applications/direct-leasing/{application_id}")
def api_delete_direct_leasing_application(application_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –î–∏—Ä–µ–∫—Ç –ª–∏–∑–∏–Ω–≥"""
    return delete_direct_leasing_application(application_id)

@app.delete("/api/applications/carcade-leasing/{application_id}")
def api_delete_carcade_leasing_application(application_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ö–∞—Ä–∫–∞–¥–µ –ª–∏–∑–∏–Ω–≥"""
    return delete_carcade_leasing_application(application_id)

# ====== –û–¢–ó–´–í–´ ======
@app.get("/api/reviews")
def api_get_reviews(
    page: int = 1, 
    page_size: int = 10, 
    rating: Optional[int] = None, 
    status: Optional[str] = None
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    return get_reviews(page, page_size, rating, status)

@app.post("/api/reviews")
def api_create_review(payload: dict, current_user = Depends(get_current_user)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    return create_review(payload, current_user)

@app.post("/api/reviews/{review_id}/reply")
def api_reply_review(review_id: str, payload: dict, current_user = Depends(get_current_user)):
    """–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –æ—Ç–∑—ã–≤"""
    return reply_review(review_id, payload, current_user)

@app.delete("/api/reviews/{review_id}")
def api_delete_review(review_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    return delete_review(review_id)

@app.patch("/api/reviews/{review_id}")
def api_update_review(review_id: str, payload: dict, current_user = Depends(get_current_user)):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return update_review(review_id, payload, current_user)

# ====== TELEGRAM WEBHOOK ======
@app.post("/api/telegram/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    """–ü—Ä–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ Telegram. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    from app.config.settings import TELEGRAM_BOT_TOKEN
    
    if token != TELEGRAM_BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Invalid token")

    try:
        update = await request.json()
    except Exception:
        update = {}

    message = (update or {}).get("message", {})
    contact = message.get("contact") or {}

    if contact and contact.get("phone_number"):
        phone_number = contact.get("phone_number")
        owner_id = contact.get("user_id") or (message.get("from") or {}).get("id")
        if owner_id:
            save_phone_from_telegram(phone_number, owner_id)

    return {"ok": True}

# ====== DEBUG ======
@app.get("/api/debug/page-source")
def api_get_debug_page_source():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π HTML –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    return get_debug_page_source()

@app.get("/api/debug/selectors-test")
def api_test_selectors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    return test_selectors()

@app.post("/api/debug/test-selector")
def api_test_custom_selector(data: dict):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    selector = data.get("selector", "")
    if not selector:
        return {
            "status": "error",
            "message": "Selector is required"
        }
    return test_custom_selector(selector)

# ====== –ì–û–†–û–î–ê –î–û–°–¢–ê–í–ö–ò ======
@app.get("/api/cities")
def api_get_cities(
    skip: int = 0,
    limit: int = 100,
    region: Optional[str] = None,
    delivery_zone: Optional[str] = None,
    is_active: Optional[bool] = None
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    return get_cities(skip, limit, region, delivery_zone, is_active)

@app.get("/api/cities/search")
def api_search_cities(query: str = Query(..., min_length=2), limit: int = 10):
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—É"""
    return search_cities(query, limit)

@app.get("/api/cities/{city_id}")
def api_get_city(city_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID"""
    city = get_city_by_id(city_id)
    if not city:
        raise HTTPException(status_code=404, detail="City not found")
    return city

@app.post("/api/cities")
def api_create_city(city_data: dict, current_user = Depends(get_current_user_or_debug)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    return create_city(CityCreate(**city_data))

@app.put("/api/cities/{city_id}")
def api_update_city(city_id: str, city_data: dict, current_user = Depends(get_current_user_or_debug)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    city = update_city(city_id, CityUpdate(**city_data))
    if not city:
        raise HTTPException(status_code=404, detail="City not found")
    return city

@app.delete("/api/cities/{city_id}")
def api_delete_city(city_id: str, current_user = Depends(get_current_user_or_debug)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    success = delete_city(city_id)
    if not success:
        raise HTTPException(status_code=404, detail="City not found")
    
    return {"success": True, "message": "City deleted"}

@app.get("/api/cities/regions/delivery")
def api_get_delivery_regions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏"""
    return get_delivery_regions()

@app.post("/api/cities/initialize")
def api_initialize_cities(current_user = Depends(get_current_user_or_debug)):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    initialize_default_cities()
    return {"success": True, "message": "Default cities initialized"}

# ====== –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò ======
@app.get("/api/delivery-zones")
def api_get_delivery_zones(skip: int = 0, limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
    return get_delivery_zones(skip, limit)

@app.get("/api/delivery-zones/{zone_id}")
def api_get_delivery_zone(zone_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID"""
    zone = get_delivery_zone_by_id(zone_id)
    if not zone:
        raise HTTPException(status_code=404, detail="Delivery zone not found")
    return zone

@app.post("/api/delivery-zones")
def api_create_delivery_zone(zone_data: dict, current_user = Depends(get_current_user_or_debug)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    return create_delivery_zone(DeliveryZoneCreate(**zone_data))

@app.put("/api/delivery-zones/{zone_id}")
def api_update_delivery_zone(zone_id: str, zone_data: dict, current_user = Depends(get_current_user_or_debug)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    zone = update_delivery_zone(zone_id, DeliveryZoneUpdate(**zone_data))
    if not zone:
        raise HTTPException(status_code=404, detail="Delivery zone not found")
    return zone

@app.delete("/api/delivery-zones/{zone_id}")
def api_delete_delivery_zone(zone_id: str, current_user = Depends(get_current_user_or_debug)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    success = delete_delivery_zone(zone_id)
    if not success:
        raise HTTPException(status_code=404, detail="Delivery zone not found")
    
    return {"success": True, "message": "Delivery zone deleted"}

@app.post("/api/delivery-zones/initialize")
def api_initialize_delivery_zones(current_user = Depends(get_current_user_or_debug)):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")
    
    initialize_default_delivery_zones()
    return {"success": True, "message": "Default delivery zones initialized"}

# ====== –ö–û–†–ù–ï–í–û–ô –≠–ù–î–ü–û–ò–ù–¢ ======
@app.get("/")
def read_root():
    return {"Hello": "World"}