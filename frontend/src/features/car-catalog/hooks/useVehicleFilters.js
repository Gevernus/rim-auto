import { useState, useMemo, useCallback } from 'react';
import { useFilterData } from '../../../shared/hooks/useCars';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è fallback)
const BRAND_TO_COUNTRY = {
  'Toyota': 'japan', 'Honda': 'japan', 'Nissan': 'japan', 'Mazda': 'japan', 'Subaru': 'japan', 'Lexus': 'japan',
  'Hyundai': 'korea', 'KIA': 'korea', 'Genesis': 'korea',
  'Tesla': 'usa',
  'BMW': 'germany', 'Mercedes-Benz': 'germany', 'Audi': 'germany', 'Volkswagen': 'germany',
  'BYD': 'china', 'NIO': 'china', 'XPeng': 'china', 'Li Auto': 'china', 'Geely': 'china',
  'ÊØî‰∫öËø™': 'china', 'ËîöÊù•': 'china', 'Â∞èÈπè': 'china', 'ÁêÜÊÉ≥': 'china', 'ÁâπÊñØÊãâ': 'usa',
  'Â•îÈ©∞': 'germany', 'ÂÆùÈ©¨': 'germany', 'Â••Ëø™': 'germany', 'Â§ß‰ºó': 'germany',
  '‰∏∞Áî∞': 'japan', 'Êú¨Áî∞': 'japan', 'Êó•‰∫ß': 'japan', 'Áé∞‰ª£': 'korea', 'Ëµ∑‰∫ö': 'korea'
};

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
const initialFilters = {
  countries: [],
  vehicleCondition: 'all', // all, new, used
  brand: '',
  model: '',
  yearRange: {
    from: '',
    to: ''
  },
  priceRange: {
    from: '',
    to: ''
  },
  parameters: {
    fuelType: '',
    transmission: '',
    driveType: ''
  }
};

export const useVehicleFilters = () => {
  const [filters, setFilters] = useState(initialFilters);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const { brands, models, loading: filterDataLoading, fetchModelsForBrand } = useFilterData();

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  const updateFilter = useCallback((key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const updateNestedFilter = useCallback((parentKey, childKey, value) => {
    setFilters(prev => ({
      ...prev,
      [parentKey]: {
        ...prev[parentKey],
        [childKey]: value
      }
    }));
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω
  const updateCountriesFilter = useCallback((countries) => {
    setFilters(prev => ({
      ...prev,
      countries,
      brand: '', // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã
      model: ''  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã
    }));
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –±—Ä–µ–Ω–¥–∞
  const updateBrandFilter = useCallback((brand) => {
    setFilters(prev => ({
      ...prev,
      brand,
      model: '' // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞
    }));
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    if (brand) {
      fetchModelsForBrand(brand);
    }
  }, [fetchModelsForBrand]);

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = useCallback(() => {
    setFilters(initialFilters);
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
  const getAvailableBrands = useMemo(() => {
    // console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤, —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞–Ω—ã:', filters.countries);
    // console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∏–∑ API:', brands);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
    if (!brands || brands.length === 0) {
    //   console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—Ä–µ–Ω–¥—ã');
      if (filters.countries.length === 0 || filters.countries.includes('all')) {
        return Object.keys(BRAND_TO_COUNTRY);
      }
      
      return Object.entries(BRAND_TO_COUNTRY)
        .filter(([brand, country]) => filters.countries.includes(country))
        .map(([brand]) => brand);
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã
    if (filters.countries.length === 0 || filters.countries.includes('all')) {
    //   console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –∏–∑ API');
      return brands;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º
    const filteredBrands = brands.filter(brand => {
      const country = BRAND_TO_COUNTRY[brand];
      return country && filters.countries.includes(country);
    });
    
    // console.log('‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:', filteredBrands);
    return filteredBrands;
  }, [brands, filters.countries]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
  const getAvailableModels = useMemo(() => {
    // console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞:', filters.brand);
    // console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ API:', models);
    
    if (!filters.brand) {
      return [];
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ API
    return models;
  }, [filters.brand, models]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const hasActiveFilters = useMemo(() => {
    return (
      filters.countries.length > 0 ||
      filters.vehicleCondition !== 'all' ||
      filters.brand !== '' ||
      filters.model !== '' ||
      filters.yearRange.from !== '' ||
      filters.yearRange.to !== '' ||
      filters.priceRange.from !== '' ||
      filters.priceRange.to !== '' ||
      filters.parameters.fuelType !== '' ||
      filters.parameters.transmission !== '' ||
      filters.parameters.driveType !== ''
    );
  }, [filters]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
  const getApiFilters = useCallback(() => {
    // console.log('üîç getApiFilters –≤—ã–∑–≤–∞–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
    
    const apiFilters = {
      page: 1, // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      page_size: 12
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
    if (filters.brand) {
      apiFilters.title = filters.brand; // Backend –∏—â–µ—Ç –ø–æ title
    //   console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É:', filters.brand);
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ü–µ–Ω - –¥–µ–ª–∏–º –Ω–∞ 10000 –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ ‰∏á
    if (filters.priceRange.from) {
      const priceInWan = (parseInt(filters.priceRange.from) / 10000).toString();
      apiFilters.price_from = priceInWan;
    //   console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –æ—Ç: ${filters.priceRange.from} —é–∞–Ω–µ–π = ${priceInWan}‰∏á`);
    }

    if (filters.priceRange.to) {
      const priceInWan = (parseInt(filters.priceRange.to) / 10000).toString();
      apiFilters.price_to = priceInWan;
    //   console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –¥–æ: ${filters.priceRange.to} —é–∞–Ω–µ–π = ${priceInWan}‰∏á`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥–æ–¥—É
    if (filters.yearRange.from) {
      apiFilters.year_from = filters.yearRange.from;
    //   console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –æ—Ç:', filters.yearRange.from);
    }

    if (filters.yearRange.to) {
      apiFilters.year_to = filters.yearRange.to;
    //   console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –¥–æ:', filters.yearRange.to);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    if (filters.countries.length > 0) {
      if (filters.countries.includes('all')) {
        apiFilters.country = 'all';
        // console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ: –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã');
      } else if (filters.countries.length === 1) {
        apiFilters.country = filters.countries[0];
        // console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ:', filters.countries[0]);
      } else {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
        apiFilters.country = filters.countries[0];
        // console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ (–ø–µ—Ä–≤–∞—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö):', filters.countries[0]);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
    if (filters.priceRange.from || filters.priceRange.to) {
      apiFilters.sort_by = 'price';
      apiFilters.sort_order = 'asc';
    //   console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ');
    }

    // console.log('üîç –ò—Ç–æ–≥–æ–≤—ã–µ API —Ñ–∏–ª—å—Ç—Ä—ã:', apiFilters);
    return apiFilters;
  }, [filters]);

  return {
    filters,
    updateFilter,
    updateNestedFilter,
    updateCountriesFilter,
    updateBrandFilter,
    resetFilters,
    getAvailableBrands,
    getAvailableModels,
    hasActiveFilters,
    getApiFilters,
    filterDataLoading
  };
}; 