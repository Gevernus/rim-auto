import { useState } from 'react';
import { useVehicleFilters } from './hooks/useVehicleFilters';
import { YearPopup } from './components/YearPopup';
import { PricePopup } from './components/PricePopup';
import { ParametersPopup } from './components/ParametersPopup';

const VehicleFilters = ({ onFiltersChange, className, loading }) => {
  const {
    filters,
    updateFilter,
    updateNestedFilter,
    updateCountriesFilter,
    updateBrandFilter,
    resetFilters,
    getAvailableBrands,
    getAvailableModels,
    hasActiveFilters,
    getApiFilters
  } = useVehicleFilters();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–∞–ø–æ–≤
  const [isYearPopupOpen, setIsYearPopupOpen] = useState(false);
  const [isPricePopupOpen, setIsPricePopupOpen] = useState(false);
  const [isParametersPopupOpen, setIsParametersPopupOpen] = useState(false);

  // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
  const handleFiltersUpdate = () => {
    if (onFiltersChange) {
      const apiFilters = getApiFilters();
      onFiltersChange(apiFilters);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å—Ç—Ä–∞–Ω
  const handleCountryChange = (country) => {
    let newCountries;
    if (country === 'all') {
      newCountries = filters.countries.includes('all') ? [] : ['all'];
    } else {
      if (filters.countries.includes('all')) {
        newCountries = [country];
      } else if (filters.countries.includes(country)) {
        newCountries = filters.countries.filter(c => c !== country);
      } else {
        newCountries = [...filters.countries, country];
      }
    }
    
    updateCountriesFilter(newCountries);
    setTimeout(handleFiltersUpdate, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–∏
  const handleBrandChange = (brand) => {
    updateBrandFilter(brand);
    setTimeout(handleFiltersUpdate, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
  const handleModelChange = (model) => {
    updateFilter('model', model);
    setTimeout(handleFiltersUpdate, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  const handleConditionChange = (condition) => {
    updateFilter('vehicleCondition', condition);
    setTimeout(handleFiltersUpdate, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleReset = () => {
    resetFilters();
    setTimeout(handleFiltersUpdate, 0);
  };

  // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const countries = [
    { id: 'all', name: '–í—Å–µ —Å—Ç—Ä–∞–Ω—ã', flag: 'üåç' },
    { id: 'china', name: '–ö–∏—Ç–∞–π', flag: 'üá®üá≥' },
    { id: 'japan', name: '–Ø–ø–æ–Ω–∏—è', flag: 'üáØüáµ' },
    { id: 'korea', name: '–ö–æ—Ä–µ—è', flag: 'üá∞üá∑' },
    { id: 'germany', name: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™' },
    { id: 'usa', name: '–°–®–ê', flag: 'üá∫üá∏' }
  ];

  if (loading) {
    return (
      <div className={`bg-white dark:bg-dark-surface border border-border dark:border-dark-border rounded-lg p-6 ${className}`}>
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
            <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
            <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-white dark:bg-dark-surface border border-border dark:border-dark-border rounded-lg p-6 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞ */}
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-text-primary dark:text-dark-text-primary">
          –§–∏–ª—å—Ç—Ä—ã
        </h3>
        {hasActiveFilters && (
          <button
            onClick={handleReset}
            className="text-sm text-primary-600 hover:text-primary-700 font-medium"
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
        )}
      </div>

      {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –°—Ç—Ä–∞–Ω—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º */}
        <div>
          <h4 className="text-sm font-medium text-text-secondary dark:text-dark-text-secondary mb-3">
            –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
          </h4>
          <div className="flex flex-wrap gap-3">
            {countries.map(country => (
              <label key={country.id} className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.countries.includes(country.id)}
                  onChange={() => handleCountryChange(country.id)}
                  className="w-4 h-4 text-primary-600 bg-white dark:bg-dark-surface border-border dark:border-dark-border rounded focus:ring-primary-500"
                />
                <span className="ml-2 text-sm text-text-primary dark:text-dark-text-primary flex items-center">
                  <span className="mr-2">{country.flag}</span>
                  {country.name}
                </span>
              </label>
            ))}
          </div>
        </div>

        {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <div>
          <h4 className="text-sm font-medium text-text-secondary dark:text-dark-text-secondary mb-3">
            –°–æ—Å—Ç–æ—è–Ω–∏–µ
          </h4>
          <div className="flex gap-4">
            {[
              { value: 'all', label: '–õ—é–±–æ–µ' },
              { value: 'new', label: '–ù–æ–≤—ã–µ' },
              { value: 'used', label: '–° –ø—Ä–æ–±–µ–≥–æ–º' }
            ].map(condition => (
              <label key={condition.value} className="flex items-center cursor-pointer">
                <input
                  type="radio"
                  name="condition"
                  value={condition.value}
                  checked={filters.vehicleCondition === condition.value}
                  onChange={() => handleConditionChange(condition.value)}
                  className="w-4 h-4 text-primary-600 bg-white dark:bg-dark-surface border-border dark:border-dark-border focus:ring-primary-500"
                />
                <span className="ml-2 text-sm text-text-primary dark:text-dark-text-primary">
                  {condition.label}
                </span>
              </label>
            ))}
          </div>
        </div>
      </div>

      {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <div>
          <label className="block text-sm font-medium text-text-secondary dark:text-dark-text-secondary mb-2">
            –ú–∞—Ä–∫–∞
          </label>
          <select
            value={filters.brand}
            onChange={(e) => handleBrandChange(e.target.value)}
            className="w-full p-3 border border-border dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-text-primary dark:text-dark-text-primary focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="">–í—Å–µ –º–∞—Ä–∫–∏</option>
            {getAvailableBrands.map(brand => (
              <option key={brand} value={brand}>
                {brand}
              </option>
            ))}
          </select>
        </div>

        {/* –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
        <div>
          <label className="block text-sm font-medium text-text-secondary dark:text-dark-text-secondary mb-2">
            –ú–æ–¥–µ–ª—å
          </label>
          <select
            value={filters.model}
            onChange={(e) => handleModelChange(e.target.value)}
            disabled={!filters.brand}
            className="w-full p-3 border border-border dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-text-primary dark:text-dark-text-primary focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <option value="">–í—Å–µ –º–æ–¥–µ–ª–∏</option>
            {filters.brand && getAvailableModels.map(model => (
              <option key={model} value={model}>
                {model}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –ö–Ω–æ–ø–∫–∏ –ø–æ–ø–∞–ø–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <button
          onClick={() => setIsYearPopupOpen(true)}
          className="p-3 text-left border border-border dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-text-primary dark:text-dark-text-primary hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
        >
          <span className="text-sm text-text-secondary dark:text-dark-text-secondary">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞</span>
          <div className="mt-1">
            {filters.yearRange.from || filters.yearRange.to ? (
              <span className="text-primary-600">
                {filters.yearRange.from || '...'} - {filters.yearRange.to || '...'}
              </span>
            ) : (
              <span className="text-text-muted dark:text-dark-text-muted">–õ—é–±–æ–π –≥–æ–¥</span>
            )}
          </div>
        </button>

        <button
          onClick={() => setIsPricePopupOpen(true)}
          className="p-3 text-left border border-border dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-text-primary dark:text-dark-text-primary hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
        >
          <span className="text-sm text-text-secondary dark:text-dark-text-secondary">–¶–µ–Ω–∞</span>
          <div className="mt-1">
            {filters.priceRange.from || filters.priceRange.to ? (
              <span className="text-primary-600">
                {filters.priceRange.from ? `¬•${parseInt(filters.priceRange.from).toLocaleString()}` : '...'} - 
                {filters.priceRange.to ? `¬•${parseInt(filters.priceRange.to).toLocaleString()}` : '...'}
              </span>
            ) : (
              <span className="text-text-muted dark:text-dark-text-muted">–õ—é–±–∞—è —Ü–µ–Ω–∞</span>
            )}
          </div>
        </button>

        <button
          onClick={() => setIsParametersPopupOpen(true)}
          className="p-3 text-left border border-border dark:border-dark-border rounded-md bg-white dark:bg-dark-surface text-text-primary dark:text-dark-text-primary hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
        >
          <span className="text-sm text-text-secondary dark:text-dark-text-secondary">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</span>
          <div className="mt-1">
            {filters.parameters.fuelType || filters.parameters.transmission ? (
              <span className="text-primary-600">
                {[filters.parameters.fuelType, filters.parameters.transmission]
                  .filter(Boolean)
                  .join(', ')}
              </span>
            ) : (
              <span className="text-text-muted dark:text-dark-text-muted">–õ—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</span>
            )}
          </div>
        </button>
      </div>

      {/* –ü–æ–ø–∞–ø—ã */}
      {isYearPopupOpen && (
        <YearPopup
          yearRange={filters.yearRange}
          onApply={(range) => {
            updateNestedFilter('yearRange', 'from', range.from);
            updateNestedFilter('yearRange', 'to', range.to);
            setIsYearPopupOpen(false);
            setTimeout(handleFiltersUpdate, 0);
          }}
          onClose={() => setIsYearPopupOpen(false)}
        />
      )}

      {isPricePopupOpen && (
        <PricePopup
          priceRange={filters.priceRange}
          onApply={(range) => {
            updateNestedFilter('priceRange', 'from', range.from);
            updateNestedFilter('priceRange', 'to', range.to);
            setIsPricePopupOpen(false);
            setTimeout(handleFiltersUpdate, 0);
          }}
          onClose={() => setIsPricePopupOpen(false)}
        />
      )}

      {isParametersPopupOpen && (
        <ParametersPopup
          parameters={filters.parameters}
          onApply={(params) => {
            updateNestedFilter('parameters', 'fuelType', params.fuelType);
            updateNestedFilter('parameters', 'transmission', params.transmission);
            updateNestedFilter('parameters', 'driveType', params.driveType);
            setIsParametersPopupOpen(false);
            setTimeout(handleFiltersUpdate, 0);
          }}
          onClose={() => setIsParametersPopupOpen(false)}
        />
      )}
    </div>
  );
};

export default VehicleFilters; 