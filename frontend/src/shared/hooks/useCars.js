import { useState, useEffect } from 'react';
import { carsApi, systemApi } from '../api/client.js';
import { adaptApiResponse, adaptVehicle } from '../api/dataAdapter.js';

export const useCars = (params = {}) => {
  const [vehicles, setVehicles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({
    total: 0,
    page: 1,
    page_size: 10
  });

  const fetchCars = async (fetchParams = {}) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await carsApi.getCars({ ...params, ...fetchParams });
      const adaptedData = adaptApiResponse(response.data);
      
      setVehicles(adaptedData.vehicles);
      setPagination({ 
        total: adaptedData.total, 
        page: adaptedData.page, 
        page_size: adaptedData.page_size 
      });
    } catch (err) {
      console.error('Error fetching cars:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
    } finally {
      setLoading(false);
    }
  };

  const refreshCache = async () => {
    try {
      setLoading(true);
      const response = await carsApi.refreshCache(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
      console.log('Cache refresh result:', response.data);
      await fetchCars();
    } catch (err) {
      console.error('Error refreshing cache:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞');
    } finally {
      setLoading(false);
    }
  };

  const searchCars = async (query, filters = {}) => {
    await fetchCars({ title: query, ...filters });
  };

  const filterCars = async (filters) => {
    await fetchCars(filters);
  };

  useEffect(() => {
    fetchCars();
  }, []);

  return {
    vehicles, // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Å cars –Ω–∞ vehicles –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è frontend —Ç–∏–ø–∞–º
    loading,
    error,
    pagination,
    fetchCars,
    refreshCache,
    searchCars,
    filterCars
  };
};

// –ù–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
export const useVehicle = (id) => {
  const [vehicle, setVehicle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ ID
  const extractTitleFromId = (vehicleId) => {
    if (!vehicleId || !vehicleId.startsWith('che168_')) {
      return null;
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å che168_ –∏ —Ö–µ—à –≤ –∫–æ–Ω—Ü–µ
    const withoutPrefix = vehicleId.replace('che168_', '');
    const parts = withoutPrefix.split('_');
    
    if (parts.length < 2) {
      return null;
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å (—Ö–µ—à) –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    const titleParts = parts.slice(0, -1);
    const extractedTitle = titleParts.join(' ').replace(/_/g, ' ').trim();
    
    // –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (extractedTitle.length < 3 || /^\d+\s*$/.test(extractedTitle)) {
      return null;
    }
    
    return extractedTitle;
  };

  useEffect(() => {
    const fetchVehicle = async () => {
      if (!id) {
        setLoading(false);
        setError('ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }

      console.log('üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å ID:', id);

      try {
        setLoading(true);
        setError(null);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID
        try {
          const response = await carsApi.getCarById(id);
          if (response.data && response.data.vehicle) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫');
            setVehicle(adaptVehicle(response.data.vehicle));
            setLoading(false);
            return;
          }
        } catch (directError) {
          console.log('‚ùå –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è:', directError.message);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ ID
        const originalTitle = extractTitleFromId(id);
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ ID:', originalTitle);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        const searchVariants = [
          originalTitle,
          id.replace(/^che168_/, ''),
          id,
          originalTitle?.replace(/\s+/g, '_'),
          originalTitle?.replace(/\s+/g, '-'),
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º ID
          ...id.replace(/^che168_/, '').split('_').filter(part => part.length > 2),
          // –ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
          ...(originalTitle?.match(/\d{4}/) || []),
          // –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
          ...(originalTitle?.split(' ').filter(word => word.length > 2) || [])
        ].filter(Boolean); // –£–±–∏—Ä–∞–µ–º null/undefined
        
        console.log('üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:', searchVariants);
        
        let foundVehicle = null;
        
        for (const searchTerm of searchVariants) {
          try {
            console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫: "${searchTerm}"`);
            const response = await carsApi.getCars({ 
              title: searchTerm,
              page_size: 100 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            });
            
            const adaptedData = adaptApiResponse(response.data);
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${adaptedData.vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è "${searchTerm}"`);
            
            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID
            foundVehicle = adaptedData.vehicles.find(v => v.id === id);
            
            if (foundVehicle) {
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID');
              break;
            }
            
            // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (adaptedData.vehicles.length > 0) {
              console.log('‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
              foundVehicle = adaptedData.vehicles[0];
              break;
            }
          } catch (searchError) {
            console.log(`‚ùå –ü–æ–∏—Å–∫ "${searchTerm}" –Ω–µ —É–¥–∞–ª—Å—è:`, searchError.message);
            continue;
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–∏—Å–∫–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        if (!foundVehicle) {
          try {
            console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID');
            const response = await carsApi.getCars({ 
              page_size: 200 // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            });
            
            const adaptedData = adaptApiResponse(response.data);
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${adaptedData.vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞`);
            
            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            foundVehicle = adaptedData.vehicles.find(v => v.id === id);
            
            if (foundVehicle) {
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ID —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
            } else {
              console.log('‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
            }
          } catch (allCarsError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', allCarsError.message);
          }
        }
        
        if (foundVehicle) {
          console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω:', foundVehicle.title);
          setVehicle(foundVehicle);
        } else {
          console.log('‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          setError(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', err);
        setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      } finally {
        setLoading(false);
      }
    };

    fetchVehicle();
  }, [id]);

  return {
    vehicle,
    loading,
    error
  };
};

export const useSystemHealth = () => {
  const [health, setHealth] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const checkHealth = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await systemApi.getHealth();
      setHealth(response.data);
    } catch (err) {
      console.error('Error checking health:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    checkHealth();
  }, []);

  return {
    health,
    loading,
    error,
    checkHealth
  };
};

// –ù–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
export const useFilterData = () => {
  const [brands, setBrands] = useState([]);
  const [models, setModels] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
  const fetchBrands = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
      const response = await carsApi.getCars({ page_size: 200 });
      const adaptedData = adaptApiResponse(response.data);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
      const uniqueBrands = [...new Set(adaptedData.vehicles.map(vehicle => vehicle.brand))]
        .filter(brand => brand && brand !== 'Unknown')
        .sort();
      
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:', uniqueBrands);
      setBrands(uniqueBrands);
      
    } catch (err) {
      console.error('Error fetching brands:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
  const fetchModelsForBrand = async (brand) => {
    if (!brand) {
      setModels([]);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      // –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
      const response = await carsApi.getCars({ title: brand, page_size: 200 });
      const adaptedData = adaptApiResponse(response.data);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –±—Ä–µ–Ω–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª–∏
      const brandVehicles = adaptedData.vehicles.filter(vehicle => 
        vehicle.brand === brand
      );
      
      const uniqueModels = [...new Set(brandVehicles.map(vehicle => vehicle.model))]
        .filter(model => model && model !== 'Unknown Model')
        .sort();
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è ${brand}:`, uniqueModels);
      setModels(uniqueModels);
      
    } catch (err) {
      console.error('Error fetching models:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π');
    } finally {
      setLoading(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–µ–Ω–¥—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    fetchBrands();
  }, []);

  return {
    brands,
    models,
    loading,
    error,
    fetchBrands,
    fetchModelsForBrand
  };
}; 