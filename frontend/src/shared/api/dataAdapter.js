/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Backend API –≤ Frontend —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */

// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ /api)
const API_BASE_URL = import.meta.env.VITE_API_URL?.replace('/api', '') || 'http://localhost:8000';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–µ–Ω—É –∏–∑ backend —Ñ–æ—Ä–º–∞—Ç–∞ –≤ frontend —Ñ–æ—Ä–º–∞—Ç
 * @param {string} backendPrice - –¶–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "28‰∏á"
 * @returns {Object} –û–±—ä–µ–∫—Ç —Ü–µ–Ω—ã –≤ frontend —Ñ–æ—Ä–º–∞—Ç–µ
 */
const adaptPrice = (backendPrice) => {
  if (!backendPrice || typeof backendPrice !== 'string') {
    return {
      amount: 0,
      currency: 'CNY',
      formatted: '¬•0',
      negotiable: true
    };
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "28‰∏á" -> 28
  const numericValue = parseFloat(backendPrice.replace('‰∏á', '').replace(/[^\d.]/g, ''));
  const amount = isNaN(numericValue) ? 0 : numericValue * 10000; // ‰∏á = 10000

  return {
    amount,
    currency: 'CNY',
    formatted: `¬•${amount.toLocaleString()}`,
    negotiable: true
  };
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @param {number} index - –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
const generateId = (title, index) => {
  if (!title || title.length < 3) {
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
    return `che168_vehicle_${index}_${Date.now()}`;
  }
  
  // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const baseId = title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '_')
    .substring(0, 30);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  const hash = title.split('').reduce((a, b) => {
    a = ((a << 5) - a) + b.charCodeAt(0);
    return a & a;
  }, 0);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  return `che168_${baseId}_${Math.abs(hash)}_${index}`;
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @returns {string} –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—Ä–µ–Ω–¥
 */
const extractBrand = (title) => {
  // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∏—Ç–∞–π—Å–∫–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  const chineseBrands = [
    'ÊØî‰∫öËø™', 'ËîöÊù•', 'Â∞èÈπè', 'ÁêÜÊÉ≥', 'ÁâπÊñØÊãâ', 'Â•îÈ©∞', 'ÂÆùÈ©¨', 'Â••Ëø™', 
    'Â§ß‰ºó', '‰∏∞Áî∞', 'Êú¨Áî∞', 'Êó•‰∫ß', 'Áé∞‰ª£', 'Ëµ∑‰∫ö', 'Ê≤ÉÂ∞îÊ≤É', 'Êç∑Ë±π',
    'BYD', 'NIO', 'XPeng', 'Tesla', 'Mercedes', 'BMW', 'Audi'
  ];

  for (const brand of chineseBrands) {
    if (title.includes(brand)) {
      return brand;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
  return title.split(' ')[0] || 'Unknown';
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @param {string} brand - –ë—Ä–µ–Ω–¥
 * @returns {string} –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –º–æ–¥–µ–ª—å
 */
const extractModel = (title, brand) => {
  const withoutBrand = title.replace(brand, '').trim();
  const words = withoutBrand.split(' ').filter(word => word);
  return words.slice(0, 2).join(' ') || 'Unknown Model';
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è  
 * @returns {number} –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
 */
const extractYear = (title) => {
  // –ò—â–µ–º 4-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–æ–¥–∞–º–∏ (1990-2024)
  const yearMatch = title.match(/\b(20[0-2][0-9]|19[9][0-9])\b/);
  if (yearMatch) {
    const year = parseInt(yearMatch[0]);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (year >= 1990 && year <= 2024) {
      return year;
    }
  }
  
  // –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
  return new Date().getFullYear();
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
 */
const generateDefaults = (index) => ({
  mileage: {
    value: Math.floor(Math.random() * 50000) + 5000,
    unit: 'km',
    formatted: `${Math.floor(Math.random() * 50000) + 5000} –∫–º`
  },
  location: {
    city: ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Hangzhou'][index % 5],
    region: 'City Center',
    address: 'Ê±ΩËΩ¶‰∫§ÊòìÂ∏ÇÂú∫',
    coordinates: {
      lat: 39.9042 + (Math.random() - 0.5) * 0.1,
      lng: 116.4074 + (Math.random() - 0.5) * 0.1
    }
  },
  seller: {
    type: Math.random() > 0.7 ? 'private' : 'dealer',
    name: '‰∏ì‰∏öÊ±ΩËΩ¶ÁªèÈîÄÂïÜ',
    english_name: 'Professional Auto Dealer',
    rating: parseFloat((4.0 + Math.random() * 1.0).toFixed(1)),
    reviews_count: Math.floor(Math.random() * 200) + 10,
    certified: Math.random() > 0.3,
    phone: '+86-138-0000-0000'
  },
  specifications: {
    battery_capacity: 'N/A',
    range: 'N/A',
    power: 'N/A',
    torque: 'N/A',
    acceleration: 'N/A',
    seats: 5,
    doors: 4,
    color: 'N/A',
    interior_color: 'N/A'
  },
  features: ['Professional Inspection', 'Quality Guarantee', 'After-sales Service'],
  history: {
    accident_free: Math.random() > 0.2,
    owners_count: Math.floor(Math.random() * 3) + 1,
    import_type: Math.random() > 0.5 ? 'domestic' : 'imported',
    warranty: 'Standard warranty included'
  },
  market_data: {
    days_listed: Math.floor(Math.random() * 30) + 1,
    views: Math.floor(Math.random() * 200) + 20,
    price_trend: ['stable', 'rising', 'declining'][Math.floor(Math.random() * 3)],
    market_position: ['competitive', 'premium', 'budget'][Math.floor(Math.random() * 3)]
  }
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * @param {Object} backendCar - –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ backend
 * @param {number} index - –ò–Ω–¥–µ–∫—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * @returns {Object} –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ frontend
 */
export const adaptVehicle = (backendCar, index = 0) => {
  if (!backendCar) {
    return null;
  }

  console.log('üîß –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', backendCar);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
  const isNewFormat = backendCar.brand && backendCar.specs && backendCar.price && typeof backendCar.price === 'object';
  const isOldFormat = backendCar.title && !backendCar.brand;
  const isSimplifiedFormat = backendCar.brand && backendCar.price_value !== undefined;

  if (isNewFormat) {
    // –ù–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å specs –∏ price –æ–±—ä–µ–∫—Ç–æ–º)
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    
    const defaults = generateDefaults(index);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let images = ['/placeholder-car.svg']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (backendCar.images) {
      if (backendCar.images.local_url) {
        images = [`${API_BASE_URL}${backendCar.images.local_url}`];
        console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', images[0]);
      } else if (backendCar.images.original_url) {
        images = [backendCar.images.original_url];
        console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', images[0]);
      }
    }

    return {
      id: backendCar.id || generateId(backendCar.title, index),
      title: backendCar.title,
      english_title: `${backendCar.year || 'N/A'} ${backendCar.brand} ${backendCar.model}`,
      brand: backendCar.brand,
      model: backendCar.model,
      trim: 'Standard',
      year: backendCar.year,
      engine: backendCar.specs?.engine_volume || 'N/A',
      transmission: backendCar.specs?.transmission || 'Automatic',
      fuel_type: backendCar.specs?.fuel_type || 'Petrol',
      mileage: defaults.mileage,
      price: {
        amount: backendCar.price.amount_cny || 0,
        currency: 'CNY',
        formatted: `¬•${(backendCar.price.amount_cny || 0).toLocaleString()}`,
        negotiable: true
      },
      location: defaults.location,
      seller: defaults.seller,
      specifications: {
        ...defaults.specifications,
        engine_volume: backendCar.specs?.engine_volume,
        transmission: backendCar.specs?.transmission,
        fuel_type: backendCar.specs?.fuel_type,
        drive_type: backendCar.specs?.drive_type
      },
      features: defaults.features,
      history: defaults.history,
      market_data: defaults.market_data,
      images: images
    };
  } else if (isSimplifiedFormat) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å price_value)
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    
    const defaults = generateDefaults(index);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let images = ['/placeholder-car.svg']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (backendCar.local_image_url) {
      images = [`${API_BASE_URL}${backendCar.local_image_url}`];
      console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', images[0]);
    } else if (backendCar.image_url) {
      images = [backendCar.image_url];
      console.log('üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', images[0]);
    }

    return {
      id: backendCar.id || generateId(backendCar.title, index),
      title: backendCar.title,
      english_title: `${backendCar.year || 'N/A'} ${backendCar.brand} ${backendCar.model}`,
      brand: backendCar.brand,
      model: backendCar.model,
      trim: 'Standard',
      year: backendCar.year,
      engine: 'N/A', // –ë—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
      transmission: 'Automatic', // –ë—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
      fuel_type: 'Petrol', // –ë—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
      mileage: defaults.mileage,
      price: {
        amount: (backendCar.price_value || 0) * 10000, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —é–∞–Ω–∏
        currency: 'CNY',
        formatted: `¬•${((backendCar.price_value || 0) * 10000).toLocaleString()}`,
        negotiable: true
      },
      location: defaults.location,
      seller: defaults.seller,
      specifications: {
        ...defaults.specifications,
        // –î–æ–ø–æ–ª–Ω–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        engine_volume: extractEngineVolume(backendCar.title),
        transmission: extractTransmission(backendCar.title),
        fuel_type: extractFuelType(backendCar.title),
        drive_type: extractDriveType(backendCar.title)
      },
      features: defaults.features,
      history: defaults.history,
      market_data: defaults.market_data,
      images: images
    };
  } else if (isOldFormat) {
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
    
    const brand = extractBrand(backendCar.title);
    const model = extractModel(backendCar.title, brand);
    const year = extractYear(backendCar.title);
    const defaults = generateDefaults(index);

    return {
      id: generateId(backendCar.title, index),
      title: backendCar.title,
      english_title: `${year} ${brand} ${model}`,
      brand,
      model,
      trim: 'Standard',
      year,
      engine: 'N/A',
      transmission: 'Automatic',
      fuel_type: 'Petrol',
      mileage: defaults.mileage,
      price: adaptPrice(backendCar.price),
      location: defaults.location,
      seller: defaults.seller,
      specifications: defaults.specifications,
      features: defaults.features,
      history: defaults.history,
      market_data: defaults.market_data,
      images: backendCar.local_image_url ? 
        [`${API_BASE_URL}${backendCar.local_image_url}`] : 
        (backendCar.image_url ? [backendCar.image_url] : ['/placeholder-car.svg'])
    };
  } else {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    console.log('üîç –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏');
    
    const defaults = generateDefaults(index);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    const year = backendCar.year || extractYear(backendCar.title);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    let priceAmount = 0;
    if (backendCar.price && typeof backendCar.price === 'object') {
      priceAmount = backendCar.price.amount_cny || backendCar.price.value * 10000 || 0;
    } else if (backendCar.price_value) {
      priceAmount = backendCar.price_value * 10000;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let images = ['/placeholder-car.svg'];
    if (backendCar.images && backendCar.images.local_url) {
      images = [`${API_BASE_URL}${backendCar.images.local_url}`];
    } else if (backendCar.local_image_url) {
      images = [`${API_BASE_URL}${backendCar.local_image_url}`];
    } else if (backendCar.images && backendCar.images.original_url) {
      images = [backendCar.images.original_url];
    } else if (backendCar.image_url) {
      images = [backendCar.image_url];
    }

    return {
      id: backendCar.id || generateId(backendCar.title, index),
      title: backendCar.title,
      english_title: `${year || 'N/A'} ${backendCar.brand || 'Unknown'} ${backendCar.model || 'Unknown'}`,
      brand: backendCar.brand || 'Unknown',
      model: backendCar.model || 'Unknown',
      trim: 'Standard',
      year: year,
      engine: 'N/A',
      transmission: 'Automatic',
      fuel_type: 'Petrol',
      mileage: defaults.mileage,
      price: {
        amount: priceAmount,
        currency: 'CNY',
        formatted: `¬•${priceAmount.toLocaleString()}`,
        negotiable: true
      },
      location: defaults.location,
      seller: defaults.seller,
      specifications: {
        ...defaults.specifications,
        engine_volume: extractEngineVolume(backendCar.title),
        transmission: extractTransmission(backendCar.title),
        fuel_type: extractFuelType(backendCar.title),
        drive_type: extractDriveType(backendCar.title)
      },
      features: defaults.features,
      history: defaults.history,
      market_data: defaults.market_data,
      images: images
    };
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const extractEngineVolume = (title) => {
  const volumeMatch = title.match(/(\d+\.?\d*)[LT]/);
  return volumeMatch ? `${volumeMatch[1]}L` : null;
};

const extractTransmission = (title) => {
  if (title.includes('Ëá™Âä®') || title.includes('DCT') || title.includes('CVT') || title.includes('AT')) {
    return 'Automatic';
  } else if (title.includes('ÊâãÂä®') || title.includes('MT')) {
    return 'Manual';
  }
  return 'Automatic';
};

const extractFuelType = (title) => {
  if (title.includes('Ê∑∑Âä®') || title.includes('HV') || title.includes('ÂèåÊìé')) {
    return 'Hybrid';
  } else if (title.includes('ÁîµÂä®') || title.includes('EV')) {
    return 'Electric';
  } else if (title.includes('Êü¥Ê≤π')) {
    return 'Diesel';
  }
  return 'Petrol';
};

const extractDriveType = (title) => {
  if (title.includes('ÂõõÈ©±') || title.includes('4WD') || title.includes('AWD') || title.includes('4MATIC')) {
    return 'AWD';
  } else if (title.includes('ÂâçÈ©±') || title.includes('FWD')) {
    return 'FWD';
  } else if (title.includes('ÂêéÈ©±') || title.includes('RWD')) {
    return 'RWD';
  }
  return 'FWD';
};

/**
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ backend
 * @param {Array} backendCars - –ú–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ backend
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 */
export const adaptVehicleList = (backendCars) => {
  console.log('üîß adaptVehicleList –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', backendCars);
  
  if (!Array.isArray(backendCars)) {
    console.log('‚ùå backendCars –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof backendCars);
    return [];
  }

  const adaptedVehicles = backendCars
    .map((car, index) => {
      const adapted = adaptVehicle(car, index);
      if (adapted) {
        console.log(`‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${index + 1}:`, adapted.title);
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${index + 1}`);
      }
      return adapted;
    })
    .filter(car => car !== null);

  console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ ${adaptedVehicles.length} –∏–∑ ${backendCars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
  return adaptedVehicles;
};

/**
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * @param {Object} backendResponse - –û—Ç–≤–µ—Ç backend API
 * @returns {Object} –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å vehicles
 */
export const adaptApiResponse = (backendResponse) => {
  console.log('üîß adaptApiResponse –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç:', backendResponse);
  
  if (!backendResponse || !backendResponse.data) {
    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    return {
      vehicles: [],
      total: 0,
      page: 1,
      page_size: 10
    };
  }

  const { data, total, page, page_size } = backendResponse;
  console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${data.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –≤—Å–µ–≥–æ ${total}`);

  const result = {
    vehicles: adaptVehicleList(data),
    total: total || 0,
    page: page || 1,
    page_size: page_size || 10
  };

  console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç adaptApiResponse:', result);
  return result;
}; 