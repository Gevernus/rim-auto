/**
 * –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
 * Web: Telegram Web Apps SDK
 * React Native: –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π API —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */

import { getItemSync, setItemSync, removeItemSync } from '../storage.js';

let tgWebApp = null;

// –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
const DEBUG_USER = {
  id: 123456789,
  first_name: "–ò–≤–∞–Ω",
  last_name: "–ü–µ—Ç—Ä–æ–≤", 
  username: "ivan_petrov",
  photo_url: "https://ui-avatars.com/api/?name=–ò–≤–∞–Ω+–ü–µ—Ç—Ä–æ–≤&background=random&color=fff&size=128",
  is_premium: false,
  language_code: "ru"
};

// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π debug —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const createDebugToken = () => {
  const debugUser = {
    id: DEBUG_USER.id,
    name: `${DEBUG_USER.first_name} ${DEBUG_USER.last_name}`,
    username: DEBUG_USER.username,
    avatar: DEBUG_USER.photo_url,
    telegram_id: DEBUG_USER.id,
    is_debug: true
  };
  
  // –°–æ–∑–¥–∞–µ–º debug —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const debugTokenData = {
    user: debugUser,
    debug: true,
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 —á–∞—Å–∞
  };
  
  const debugToken = btoa(unescape(encodeURIComponent(JSON.stringify(debugTokenData))));
  
  return debugToken;
};

const DEBUG_INIT_DATA = "user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22%D0%98%D0%B2%D0%B0%D0%BD%22%2C%22last_name%22%3A%22%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%22%2C%22username%22%3A%22ivan_petrov%22%2C%22language_code%22%3A%22ru%22%7D&auth_date=" + Math.floor(Date.now() / 1000) + "&hash=debug_hash";

// –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
const DEBUG_MODE = import.meta.env.DEV && Boolean(getItemSync('telegram_debug_mode'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const initTelegramWebApp = () => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    tgWebApp = window.Telegram.WebApp;
    tgWebApp.ready();
    return true;
  }
  return false;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram WebApp
export const isTelegramWebApp = () => {
  if (typeof window === 'undefined') return false;
  
  // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º Telegram WebApp
  if (DEBUG_MODE) {
    return true;
  }
  
  const hasWebApp = Boolean(window.Telegram?.WebApp);
  if (!hasWebApp) return false;

  if (!tgWebApp) {
    initTelegramWebApp();
  }

  // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ Telegram —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ initData –∏–ª–∏ user
  const hasInitData = Boolean(tgWebApp?.initData && tgWebApp.initData.length > 0) || Boolean(tgWebApp?.initDataUnsafe?.user);
  return hasInitData;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram
export const getTelegramInitData = () => {
  // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (DEBUG_MODE) {
    return DEBUG_INIT_DATA;
  }
  
  if (!isTelegramWebApp()) return null;
  
  if (!tgWebApp) {
    initTelegramWebApp();
  }
  
  return tgWebApp?.initData || null;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
export const getTelegramUser = () => {
  // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (DEBUG_MODE) {
    return DEBUG_USER;
  }
  
  if (!isTelegramWebApp()) return null;
  
  if (!tgWebApp) {
    initTelegramWebApp();
  }
  
  return tgWebApp?.initDataUnsafe?.user || null;
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram WebApp
export const closeTelegramWebApp = () => {
  if (isTelegramWebApp() && tgWebApp) {
    tgWebApp.close();
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
export const showTelegramMainButton = (text, onClick) => {
  if (!isTelegramWebApp() || !tgWebApp) return;
  
  tgWebApp.MainButton.text = text;
  tgWebApp.MainButton.show();
  tgWebApp.MainButton.onClick(onClick);
};

// –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
export const hideTelegramMainButton = () => {
  if (!isTelegramWebApp() || !tgWebApp) return;
  
  tgWebApp.MainButton.hide();
};

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export const showTelegramAlert = (message) => {
  if (DEBUG_MODE) {
    alert(`[DEBUG] ${message}`);
    return;
  }
  
  if (!isTelegramWebApp() || !tgWebApp) {
    // Fallback –¥–ª—è –≤–µ–±–∞
    alert(message);
    return;
  }
  
  tgWebApp.showAlert(message);
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
export const isTelegramPremium = () => {
  const user = getTelegramUser();
  return Boolean(user?.is_premium);
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export const enableDebugMode = () => {
  if (typeof window !== 'undefined') {
    setItemSync('telegram_debug_mode', true);
    console.log('üß™ Telegram DEBUG MODE –≤–∫–ª—é—á–µ–Ω');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  }
};

export const disableDebugMode = () => {
  if (typeof window !== 'undefined') {
    removeItemSync('telegram_debug_mode');
    console.log('üß™ Telegram DEBUG MODE –≤—ã–∫–ª—é—á–µ–Ω');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram WebApp
  if (!DEBUG_MODE) {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp SDK
    const checkTelegram = () => {
      if (window.Telegram?.WebApp) {
        initTelegramWebApp();
      } else {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 100ms
        setTimeout(checkTelegram, 100);
      }
    };
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', checkTelegram);
    } else {
      checkTelegram();
    }
  }
} 

export const requestUserPhone = async () => {
  // DEBUG: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
  if (DEBUG_MODE) {
    return { accepted: true, phone: "+79990000000", is_debug: true };
  }

  // –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram WebApp
  if (!isTelegramWebApp()) {
    return { accepted: false, reason: "not_telegram" };
  }

  if (!tgWebApp) {
    initTelegramWebApp();
  }

  // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API: Telegram.WebApp.requestContact(callback)
  if (tgWebApp?.requestContact) {
    return await new Promise((resolve) => {
      try {
        tgWebApp.requestContact((shared) => {
          // shared: boolean ‚Äî –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
          resolve({ accepted: Boolean(shared) });
        });
      } catch (e) {
        console.error("requestContact error:", e);
        resolve({ accepted: false, reason: "request_error" });
      }
    });
  }

  // –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ—Ç–æ–¥–∞
  return { accepted: false, reason: "unsupported" };
}; 